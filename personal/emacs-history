;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(helm-grep-history ssh-history magit-read-file-hist file-name-history query-replace-history helm-file-name-history grep-files-history grep-regexp-history input-method-history tmphist read-expression-history shell-command-history magit-read-rev-history org-refile-history minibuffer-history-search-history mu4e~headers-search-hist ess--completing-hist search-ring regexp-search-ring org-capture-template-prompt-history::Amount org-capture-template-prompt-history::Account org-capture-template-prompt-history::Payee org-read-date-history buffer-name-history minibuffer-history))
(setq helm-grep-history '("meal plan" "all.table" "ip" "effectiveness" #("/bigblow-" 0 9 (fontified t font-lock-fontified t line-prefix nil wrap-prefix nil face org-meta-line org-category "life")) "bigblow-"))
(setq ssh-history '("JBA29 -X -C" "JBA29" "JBA28 -X -C" "JBA28 -C -X" "JBA28 -X -C" "JBA28 -C -X" "JBA28"))
(setq magit-read-file-hist '("Script/Validation/Hurricane/ValidateHIP.R" "W15-0631-ADRG.org"))
(setq file-name-history '("~/git/org/contacts.org" "/home/yitang/git/.emacs.d/.git/COMMIT_EDITMSG" "~/git/.emacs.d/init.org" "/home/yitang/SVN/ADRG/.git/COMMIT_EDITMSG" "~/SVN/ADRG/ADRG-Canada/R/VulFunc.R" "~/SVN/ADRG/ADRG-Canada/R/Hazard.R" "~/SVN/ADRG/ADRG-Canada/R/Damage.R" "/home/yitang/SVN/ADRG/.git/COMMIT_EDITMSG" "~/SVN/ADRG/ADRG-Canada/R/zzz.R" "/home/yitang/SVN/ADRG/.git/COMMIT_EDITMSG" "~/SVN/ADRG/ADRG-Canada/DESCRIPTION" "~/SVN/ADRG/ADRG-Canada/R/IO.R" "~/git/jbarm/2013s7553-GFES.org" "~/git/org/Profession/Blogging.org" "~/.emacs" "~/git/jbarm/re_org_refile.org" "~/git/jbarm/W15-0631-ADRG.org" "~/git/jbarm/Mentorship.org" "~/SVN/ADRG/ADRG-Canada/R/ADRG.Canada.R" "/home/yitang/SVN/ADRG/.git/COMMIT_EDITMSG" "~/SVN/ADRG/ADRG-Canada/R/ADRG.R" "~/SVN/ADRG/ADRG-Canada.Rcheck/00check.log" "/home/yitang/SVN/ADRG/.git/COMMIT_EDITMSG" "/home/yitang/SVN/ADRG/.git/COMMIT_EDITMSG" "/home/yitang/SVN/ADRG/.git/COMMIT_EDITMSG" "~/SVN/ADRG/ADRG-Canada/man/QC.Rd" "~/SVN/ADRG/ADRG-Canada/R/Output_QA.R" "~/SVN/ADRG/ADRG-Canada/R/Input_QA.R" "/home/yitang/SVN/ADRG/.git/COMMIT_EDITMSG" "/home/yitang/SVN/ADRG/.git/COMMIT_EDITMSG"))
(setq query-replace-history '("\\n" ") ("))
(setq helm-file-name-history '("org-effectiveness.el" "Blogging.org" "W13-3814-ADRG.org" "temp.png" "init.org" "COMMIT_EDITMSG" "projectile.cache" "projectile-bookmarks.eld" "W15-0631-ADRG.org" "tmp.org" "COMMIT_EDITMSG" "IT.org" "digital-life.org" "COMMIT_EDITMSG" "history" "COMMIT_EDITMSG" "config" "config" "COMMIT_EDITMSG" "COMMIT_EDITMSG" ".emacs" "org-clock-save.el" "f-autoloads.el" "olivetti-autoloads.el" "pretty-mode-autoloads.el" "keyfreq-autoloads.el" "sunshine-autoloads.el" "gist-autoloads.el" "gh-autoloads.el" "pcache-autoloads.el"))
(setq grep-files-history '("*" "*.el"))
(setq grep-regexp-history '("valid arguments" "effectiveness"))
(setq read-expression-history '(" (yt/last-updated-date)" "(setq ispell-program-name \"/usr/bin/aspell\")" "(my/format-img)" "(search-forward-regexp \"\\\\(\\\\*Figure\\\\)\\\\(.+\\\\):\")" "(search-forward-regexp \"\\\\(^Figure\\\\)\\\\(.+\\\\):\")" "(length bh/project-list)" "(yt/generate-project-list)" "(yt/org-begining-of-subtree)" "(point)" "(yt/org-begining-of-subtree)" "(outline-end-of-subtree)" "(yt/generate-project-list)" "(setq org-agenda-sticky t)" "  (unless bh/project-list
    (yt/generate-project-list))" "(yt/generate-project-list)" "(setq org-agenda-sticky nil)" "(setq org-agenda-sticky ni)" "(yt/generate-project-list)" "    (setq current-project (pop bh/project-list))
;;    (when current-project
      (org-with-point-at current-project
        (setq bh/hide-scheduled-and-waiting-next-tasks nil)
        (bh/narrow-to-project))
      ;; Remove the marker
      (setq current-project nil)
      (org-agenda-redo)
      (beginning-of-buffer)
" "      (org-with-point-at current-project
        (setq bh/hide-scheduled-and-waiting-next-tasks nil)
        (bh/narrow-to-project))
      ;; Remove the marker
      (setq current-project nil)
      (org-agenda-redo)
      (beginning-of-buffer)
      (setq num-projects-left (length bh/project-list))" "    (setq current-project (pop bh/project-list))
    (when current-project
      (org-with-point-at current-project
        (setq bh/hide-scheduled-and-waiting-next-tasks nil)
        (bh/narrow-to-project))
                                        ; Remove the marker
      (setq current-project nil)
      (org-agenda-redo)
      (beginning-of-buffer)
      (setq num-projects-left (length bh/project-list)))" "    (when current-project
      (org-with-point-at current-project
        (setq bh/hide-scheduled-and-waiting-next-tasks nil)
        (bh/narrow-to-project))
                                        ; Remove the marker
      (setq current-project nil)
      (org-agenda-redo)
      (beginning-of-buffer)
      (setq num-projects-left (length bh/project-list)))" "    (setq current-project (pop bh/project-list))
    (when current-project
      (org-with-point-at current-project
        (setq bh/hide-scheduled-and-waiting-next-tasks nil)
        (bh/narrow-to-project))
                                        ; Remove the marker
      (setq current-project nil)
      (org-agenda-redo)
      (beginning-of-buffer)
      (setq num-projects-left (length bh/project-list))
      (cond ((> num-projects-left 0)
	     (message \"%s projects left to view\" num-projects-left)
	     (beginning-of-buffer)
	     (setq bh/hide-scheduled-and-waiting-next-tasks t)
	     ;; (error \"All projects viewed.\"))))))
	     )
	    t
	    nil)
	    )
" "    (when current-project
      (org-with-point-at current-project
        (setq bh/hide-scheduled-and-waiting-next-tasks nil)
        (bh/narrow-to-project))
                                        ; Remove the marker
      (setq current-project nil)
      (org-agenda-redo)
      (beginning-of-buffer)
      (setq num-projects-left (length bh/project-list))
      (cond ((> num-projects-left 0)
	     (message \"%s projects left to view\" num-projects-left)
	     (beginning-of-buffer)
	     (setq bh/hide-scheduled-and-waiting-next-tasks t)
	     ;; (error \"All projects viewed.\"))))))
	     )
	    t
	    nil)
	    )" "    (setq current-project (pop bh/project-list))
    (when current-project
      (org-with-point-at current-project
        (setq bh/hide-scheduled-and-waiting-next-tasks nil)
        (bh/narrow-to-project))
                                        ; Remove the marker
      (setq current-project nil)
      (org-agenda-redo)
      (beginning-of-buffer)
      (setq num-projects-left (length bh/project-list))
      (cond ((> num-projects-left 0)
	     (message \"%s projects left to view\" num-projects-left)
	     (beginning-of-buffer)
	     (setq bh/hide-scheduled-and-waiting-next-tasks t)
	     ;; (error \"All projects viewed.\"))))))
	     )))" "    (setq current-project (pop bh/project-list))
    (when current-project
      (org-with-point-at current-project
        (setq bh/hide-scheduled-and-waiting-next-tasks nil)
        (bh/narrow-to-project))
                                        ; Remove the marker
      (setq current-project nil)
      (org-agenda-redo)
      (beginning-of-buffer)
      (setq num-projects-left (length bh/project-list))
      (cond ((> num-projects-left 0)
	     (message \"%s projects left to view\" num-projects-left)
	     (beginning-of-buffer)
	     (setq bh/hide-scheduled-and-waiting-next-tasks t)
	     ;; (error \"All projects viewed.\"))))))
	     )))))

" "    (when current-project
      (org-with-point-at current-project
        (setq bh/hide-scheduled-and-waiting-next-tasks nil)
        (bh/narrow-to-project))
                                        ; Remove the marker
      (setq current-project nil)
      (org-agenda-redo)
      (beginning-of-buffer)
      (setq num-projects-left (length bh/project-list))
      (cond ((> num-projects-left 0)
	     (message \"%s projects left to view\" num-projects-left)
	     (beginning-of-buffer)
	     (setq bh/hide-scheduled-and-waiting-next-tasks t)
	     ;; (error \"All projects viewed.\"))))))
	     ))" "    (unless bh/project-list
      (while (< (point) (point-max))
        (while (and (< (point) (point-max))
                    (or (not (org-get-at-bol 'org-hd-marker))
                         (org-with-point-at (org-get-at-bol 'org-hd-marker)
                          (or (not (bh/is-project-p))
                              (bh/is-project-subtree-p)))))
          (forward-visible-line 1))
        (when (< (point) (point-max))
          (add-to-list 'bh/project-list (copy-marker (org-get-at-bol 'org-hd-marker)) 'append))
        (forward-visible-line 1)))" "(setq bh/project-list nil)" "    (when current-project
      (org-with-point-at current-project
        (setq bh/hide-scheduled-and-waiting-next-tasks nil)
        (bh/narrow-to-project))
                                        ; Remove the marker
      (setq current-project nil)
      (org-agenda-redo)
      (beginning-of-buffer)
      (setq num-projects-left (length bh/project-list))
      (if (> num-projects-left 0)
          (message \"%s projects left to view\" num-projects-left)
        (beginning-of-buffer)
        (setq bh/hide-scheduled-and-waiting-next-tasks t)
        (error \"All projects viewed.\")))"))
(setq shell-command-history '("git svn dcommit" "git svn rebase" "git svn dcommit" "git svn commit" "git svn rebase" "git svn dcommit" "(yt/git-commit-push (list \"tmp.txt\"))" "git svn dcommit" "git svn rebase" "git svn dcommit" "git svn rebase" "git svn fetch" "git svn dcommit" "mv jbarm.html ~/share/" "git svn dcommit" "rm -rf ~/voca-builder" "rm -rf tmp*" "mv -rf tmp*" "ls tmp*" "ls" "ls *tmp" "ls" "mv W15-0261-CCR.org _archive/" "mv W14-8258-SFG.org _archive/" "mv R-dev.org _archive/" "mv 2014s1763-ELECT.org _archive/" "mv 2014s1536-GRIM.org _archive/" "mv 2014s1097-GFHES.org _archive/" "git svn dcommit" "mv init.html ~/git/MyBlog/emacs-config.html"))
(setq magit-read-rev-history '("origin/master" "origin/master"))
(setq org-refile-history '(#("Tasks" 0 5 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "R_Language" fontified nil face org-level-1)) "Tasks/" "Tasks/" "Tasks/ (Emacs.org)" "Tasks/ (life.org)" "Tasks/ (Emacs.org)" "GFES validation report/Tasks/ (2013s7553-GFES.org)" "Tasks/ (jbarm.org)" "Tasks/ (jbarm.org)" "Tasks/Team meetin/ (jbarm.org)" "Tasks/ (jbarm.org)" "GFES validation report/Tasks/ (2013s7553-GFES.org)" "Tasks/Team meetin/ (jbarm.org)" "Tasks/ (Emacs.org)" "Tasks/ (jbarm.org)" "Tasks/ (jbarm.org)" "Tasks/ (life.org)" "Tasks/ (digital.org)" "Tasks/Team meetin/ (jbarm.org)" "Tasks/ (jbarm.org)" #("LD documents/Notes" 0 12 (wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil face org-level-1 :org-clock-minutes 849 org-category "jbarm" fontified t) 13 18 (org-category "jbarm" face org-level-2 wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("*" 0 1 (face org-hide)) fontified t)) "LD documents/Notes/" #("Notes" 0 5 (face org-level-1 wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category "jbarm" fontified nil)) "Notes/" #("Canada Updates/Notes" 0 14 (org-category-position 1 org-category #("ADRG" 0 4 (font-lock-fontified t fontified t line-prefix nil wrap-prefix nil face org-meta-line org-category "W15-0631-ADRG" org-category-position 1)) face org-level-1 wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil fontified t) 15 20 (org-category-position 1 org-category #("ADRG" 0 4 (font-lock-fontified t fontified t line-prefix nil wrap-prefix nil face org-meta-line org-category "W15-0631-ADRG" org-category-position 1)) face org-level-2 wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("*" 0 1 (face org-hide)) fontified t)) "Canada Updates/Notes/" #("Notes" 0 5 (org-category-position 1 org-category #("ADRG" 0 4 (font-lock-fontified t fontified t line-prefix nil wrap-prefix nil face org-meta-line org-category "W15-0631-ADRG" org-category-position 1)) face org-level-1 wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil fontified t)) "Notes/" #("Tasks" 0 5 (face org-level-1 wrap-prefix #("  " 0 2 (face org-indent)) line-prefix nil org-category-position 1 org-category #("Tri-Prob" 0 8 (font-lock-fontified t fontified t org-category "Tri-Prob" org-category-position 1 line-prefix nil wrap-prefix nil face org-meta-line)) fontified t)) "Tasks/" "Tasks" "Tasks/"))
(setq minibuffer-history-search-history '("clone"))
(setq mu4e~headers-search-hist '("gary" "gfes workshop" "warwickgrad" "warwick" "from: Jessica Skeggs" "from: Jess" "from: Jessica" "from: Jessica Skeggs" "from: Jess" "james"))
(setq ess--completing-hist '("*ADRG-Canada*" "*ssh JBA29*" "R" "*new*" "*R:5*" "*new*" "*ADRG-Canada*" "R" "*ssh JBA28*" "R" "C++" "DEFAULT" "C++" "BSD" "GNU" "DEFAULT" "OWN" "R" "*ADRG-Canada*" "findVulFunc" "findHazard" "*R-main*" "*R:2*" "R-28-Hurricane" "R-28" "R-28-Hurricane" "R-29" "R-28" "C++" "GNU"))
(setq search-ring '("compvulfuncxxx" "approx" "config$input" "1.5.3" "portfo" "name" "approc" "vui" "assumption" "narrow" "archivable" "book" "team meeting" "\"V\"" "defvar bh/proj" "org-contact"))
(setq regexp-search-ring '("diag" "den" "set" "points" "po" "hist" "h" "ggplot" "gg" "ggplot" "x_wind <-" "ggplo" "ggp	" "ggplot" "wind." "lati"))
(setq org-capture-template-prompt-history::Amount '("4.50 ;; double" "3.70" "5.70" "1.65"))
(setq org-capture-template-prompt-history::Account '("Food:Lunch" "Lunch" "Food:Dinner" "Leisure:Drink:Others"))
(setq org-capture-template-prompt-history::Payee '("Skipton-Cobble's" "McDonals's" "Skipton_Hongkong-takeway" "Skipton-Utopia"))
(setq org-read-date-history '("   " "20:30+1:30    " "   " "19:00-20:30    " "   " "17:00    " "   " "09:30    " "   " "12:00    " "   " "2015-06-17    " "   "))
(setq buffer-name-history '("*Org Agenda( )*" "*Org Agenda(a)*" "DESCRIPTION" "QC.Rd" "NAMESPACE" "Damage.R" "*Shell Command Output*" "init.org" "*eshell*" "*mu4e-view*" "*draft*" "*Customize Option: Org Capture Templates*" "*draft*" "*Edit Macro*" "*draft*" "*Org Agenda(a)*" "*Org Agenda( )*" "*Org Agenda(a)*" "*Org Agenda( )*" "smart-mode-line-powerline-theme-autoloads.el" "*Org Agenda*" "git-report-buffer" "*Org Agenda( )*" "      (org-with-point-at current-project" "*Edit Macro*" " (not (bh/is-project-p))" "init.org" "org-contacts.el" "*draft*" "*Messages*"))
(setq minibuffer-history '("/home/yitang/git/org/contacts.org" "tmp.org" #("+TOC" 0 1 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-fontified t font-lock-multiline t face font-lock-string-face) 1 4 (fontified t line-prefix #("      " 0 6 (face org-indent)) wrap-prefix #("      " 0 6 (face org-indent)) font-lock-fontified t font-lock-multiline t face font-lock-string-face)) "blog draft" "init.org" "unless" "when" "visited-file-modtime" "tmp.org" "visited-file-modtime" "aasdlasd" "init.org" "org demote sub" "demote sub tree" "org demote sub" "org demote" #("Tasks" 0 5 (fontified t line-prefix #("***" 0 3 (face org-hide)) wrap-prefix #("        " 0 8 (face org-indent)) face org-level-4)) #("Notes" 0 5 (fontified t line-prefix #("***" 0 3 (face org-hide)) wrap-prefix #("        " 0 8 (face org-indent)) face org-level-4)) "org demo" #("Notes" 0 5 (fontified t line-prefix #("***" 0 3 (face org-hide)) wrap-prefix #("        " 0 8 (face org-indent)) face org-level-4)) #("Tasks" 0 5 (fontified t line-prefix #("***" 0 3 (face org-hide)) wrap-prefix #("        " 0 8 (face org-indent)) face org-level-4)) "org demote" "yt projec" "org insert heading" "kill" "agenda custo" "init.org" "save all buffer" "Jess " "/JBA/INBOX.SuperTL"))
