#+TITLE:   Unified Emacs OS - An Statistician's Implementation
#+AUTHOR:  Yi Tang 
#+EMAIL:   yi.tang.uk@me.com
#+LANGUAGE: en
#+PROPERTY: header-args :tangle yes 
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+OPTIONS: H:4 num:nil toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t
#+OPTIONS: skip:nil d:(HIDE) tags:not-in-toc
#+TODO: SOMEDAY(s) TODO(t) INPROGRESS(i) WAITING(w@/!) NEEDSREVIEW(n@/!) | DONE(d)
#+TODO: WAITING(w@/!) HOLD(h@/!) | CANCELLED(c@/!)
#+TAGS: export(e) noexport(n)
#+STARTUP: align fold nodlcheck lognotestate content showeverything


* About This Document 
  [2015-01-23 Fri 10:58]
  
  I have tried to use Emacs for many years, and really start to use it at 2014-Jun.  I would recommand Emacs for normal usage, but for me, there are few milestphone.  
  
  first, I find myself spent more and more time in scaning the documents I write and deprised about lossing lecture notes, but on the otherhand, it imporrsible to get the notes immediately when I needed it.  
  
  second, er I start to work as an Statisticiain, due to the workload, I need an system to keep project log, include decisoin made, code, progress report, email or meeting discussion etc.  I was adviced to use Office to do it, but it such a pain, and I find most of people don't do it.  
  
  third, when I find the solution for the second problem, using org-mode to implememnt Literate Data Analysis, I am happy about norang's setting for a long time, and try to avoid dig into Emacs.  but when the data becomes physically big, it won't able to practise it locally, and I realise the ESS provide remote session, and it completely blow my mind.  I can run a R seesion on the server just like it was on my computer, how fanstatistic is that?  everything is the same.  
  
  then I deivided to learn Emacs Lisp langauge to build a unified system that I can use on my personal PC, VM, server, and they are all the same!  
  
  As my ocnifigration grows bigger and bigger, I deifinidelty need an way to orgnise, test and expand it.  previously, I have about 7 =.el= file, for exmaple, =setup-org.el=, =setup-email.el=, and I document on each file.  the downside of physcially separete is that I cannot modulate it easily.  Inpisraed by Sachua's new posts, I think it would be an brilliant idea to org emac configration code into one single org file, letting along the conviencen of orgnising and share my seetting, the precious thing I would appreciate is it provide an way I could start with a long comments, thoughts or workflow.  in this way, the code becomes less important as it should be.  
  
  Normally you could tangle a org file to extract all the source code into one file, that you could use.  But I would like to push liteartpr programming furture in two aspects:  1) the source code takes input from this org file, I.e. table.  2) it facility Babel Library to integrate not only Emacs Lisp, but also sh and R functions that could be run in Emacs, and I found it particullary useful. 
  
  but yo could still use most of the settings.  
* Licence 
  [2015-01-23 Fri 10:58]
  
  #+begin_example
  Copyright (C)  2013  Yi Tang
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.3
  or any later version published by the Free Software Foundation;
  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
  
  Code in this document is free software: you can redistribute it
  and/or modify it under the terms of the GNU General Public
  License as published by the Free Software Foundation, either
  version 3 of the License, or (at your option) any later version.
  
  This code is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  #+end_example
  
  This document http://yi-tang.github.io/org-mode.html (either in its HTML format or in its Org format) is licensed under the GNU Free Documentation License version 1.3 or later (http://www.gnu.org/copyleft/fdl.html).
  
  The code examples and CSS stylesheets are licensed under the GNU General Public License v3 or later (http://www.gnu.org/licenses/gpl.html).
  
* Getting Started  
  [2015-01-20 Tue 08:09]
  
  question I want to answer 
  
1. why I need this/that package, what functionality they provide.
2. how to improve the current work flow,
3. 
   
About this file: 
Use this 
#+begin_src emacs-lisp :eval no 
(require 'org)
(setq org-confirm-babel-evaluate nil)  ;; evaluate src block without confirmation 

;;;;;;; [2015-01-22 Thu 21:27]
(defvar endless/init.org-message-depth 5
  "What depth of init.org headers to message at startup.")

(with-temp-buffer
  (insert-file "~/git/.emacs.d/yt/init.org")
  (goto-char (point-min))

  ;; org babels 
  (search-forward "\n* Babel Library")
  (org-copy-subtree)
  (let ((tmp-file (make-temp-file "tmp")))
    (with-temp-file tmp-file (yank))
    (org-babel-lob-ingest tmp-file))

  ;; emacs lisp functions 
  (goto-char (point-min))
  (search-forward "\n* Emacs Configuration")
  (while (not (eobp))
    (forward-line 1)
    (cond
     ;; Report Headers
     ((looking-at
       (format "\\*\\{2,%s\\} +.*$" 
               endless/init.org-message-depth))
      (message "%s" (match-string 0)))
      ;; (message (format (current-time-string))))
     ;; Evaluate Code Blocks
     ((looking-at "[\s]*\\#\\+begin_src\semacs-lisp")
      ;; ((looking-at "#\\+BEGIN_SRC +emacs-lisp.*$")
      ;; ((looking-at "^#\\+BEGIN_SRC +.*$")
      (org-babel-execute-src-block))
     ;; Finish on the next level-1 header
     ((looking-at "^\\* End")
      (goto-char (point-max))))))

#+end_src

or this 

#+begin_src emacs-lisp :eval no
(setq user-emacs-directory "~/git/.emacs.d/")
(require 'org)
(org-babel-load-file 
 (expand-file-name "init.org"
                   user-emacs-directory))
#+end_src
** Testsing 
   [2015-02-12 Thu 18:51]
   
- unload-feature :: unload functions, remove hooks, variable, functions etc.
* Emacs Configuration
  :LOGBOOK:  
  CLOCK: [2015-01-25 Sun 22:25]--[2015-01-25 Sun 23:01] =>  0:36
  CLOCK: [2015-01-24 Sat 21:50]--[2015-01-24 Sat 22:30] =>  0:40
  CLOCK: [2015-01-23 Fri 10:15]--[2015-01-23 Fri 11:47] =>  1:32
  CLOCK: [2015-01-22 Thu 20:26]--[2015-01-23 Fri 01:46] =>  5:20
  :END:      
  [2015-01-19 Mon 11:42]

** General 
*** Initialise 
    [2015-01-19 Mon 12:46]
#+begin_src emacs-lisp 
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)

(add-to-list 'load-path "~/git/.emacs.d/lisp")
(let ((default-directory "~/git/.emacs.d/.cask"))
  (normal-top-level-add-subdirs-to-load-path))

#+end_src

#+results:

    
    
*** Assorted Pieces 
    [2015-01-19 Mon 12:21]
    #+begin_src emacs-lisp

    ;; ref: http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files
    ;; save all backup files (foo~) to this directory.
    (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
          backup-by-copying t    ; Don't delink hardlinks
          version-control t      ; Use version numbers on backups
          delete-old-versions t  ; Automatically delete excess backups
          kept-new-versions 20   ; how many of the newest versions to keep
          kept-old-versions 5    ; and how many of the old
          auto-save-timeout 20   ; number of seconds idle time before auto-save (default: 30)
          auto-save-interval 200 ; number of keystrokes between auto-saves (default: 300)
          )


    ;; guide-key package 
    (require 'guide-key)
    (setq guide-key/guide-key-sequence t) ;; on for all key-bindings 
    (guide-key-mode 1) 

                                            ;; start auto-complete with emacs
    (require 'auto-complete)
                                            ;; do default config for auto-complete
    (require 'auto-complete-config)
    (ac-config-default)

    ;; (require 'yasnippet)
    ;; (yas-global-mode 1)
    ;; (setq yas-snippet-dirs '("~/git/.emacs.d/my-snippets"
    ;;                          "~/git/.emacs.d/.cask/24.4.2/elpa/yasnippet-20141102.1554/snippets"
    ;;                          "~/git/.emacs.d/.cask/25.0.50.1/elpa/yasnippet-20141102.1554/snippets"))

    (recentf-mode 1)
    (setq recentf-max-saved-items 200
          recentf-max-menu-items 15)
;;     (global-set-key "\C-r" 'helm-recentf) ;; helm-mini handle this


    (setq inhibit-startup-message t)        ; Disable startup message

    #+end_src 
    
    #+results:
    : t

*** Window Navigation 
    [2015-01-19 Mon 12:13]
    #+begin_src emacs-lisp

;; ;;; winner-mode, undo window configration
;; (require 'winner-mode) ;; default package
(winner-mode 1)
;; winner-undo -> C-c <left>
;; winner-redo -> C-c <right>


;; visible notication for invalid options 
(setq visible-bell t) 

;; move between windows, alternatives: window_number.el
(global-set-key (kbd "C-x <up>") 'windmove-up)
(global-set-key (kbd "C-x <down>") 'windmove-down)
(global-set-key (kbd "C-x <right>") 'windmove-right)
(global-set-key (kbd "C-x <left>") 'windmove-left)
(require 'golden-ratio)
(golden-ratio-mode 1)

;; prefer horizentally split window
;; (setq split-height-threshold nil)
;;  (setq split-width-threshold 0)


    #+end_src

    #+results:
    : t

*** Utilities
    [2015-01-19 Mon 12:14]
    
    #+begin_src emacs-lisp
;; Change "yes or no" to "y or n"
(fset 'yes-or-no-p 'y-or-n-p)

(defun yt/reload-dot-emacs ()
  "Save the .emacs buffer if needed, then reload .emacs."
  (interactive)
  (let ((dot-emacs "~/.emacs"))
    (and (get-file-buffer dot-emacs)
         (save-buffer (get-file-buffer dot-emacs)))
    (load-file dot-emacs))
  (message "Re-initialized!"))

(defun yt/delete-this-buffer-and-file ()
  "Removes file connected to current buffer and kills buffer."
  (interactive)
  (let ((filename (buffer-file-name))
        (buffer (current-buffer))
        (name (buffer-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (when (yes-or-no-p "Are you sure you want to remove this file? ")
        (delete-file filename)
        (kill-buffer buffer)
        (message "File '%s' successfully removed" filename)))))

;; full path of current buffer
(defun yt/copy-full-path-to-kill-ring ()
  "copy buffer's full path to kill ring"
  (interactive)
  (when buffer-file-name
    (kill-new (file-truename buffer-file-name))))
(global-set-key [C-f1] 'yt/copy-full-path-to-kill-ring) 


    #+end_src

    #+RESULTS:
    : yt/copy-full-path-to-kill-ring

*** System Path
    [2015-01-19 Mon 12:15]
    #+begin_src emacs-lisp

;; osx, work with homebrew 
(defun set-exec-path-from-shell-PATH ()
  (let ((path-from-shell 
         (replace-regexp-in-string "[[:space:]\n]*$" "" 
                                   (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))
(when (equal system-type 'darwin) (set-exec-path-from-shell-PATH))


;; modify mac keyboard 
(cond ((eq system-type 'darwin)
       (fset 'insertPound "#")
       (global-set-key (kbd "M-3") 'insertPound)
       (setq ispell-program-name "/usr/local/bin/aspell")
       (setq mac-command-modifier 'meta)
       (global-unset-key (kbd "M-`"))
       (global-set-key (kbd "M-`") 'other-frame)
       (global-set-key (kbd "C-Z") nil)
       ))

(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

;; windows path convention
(setenv "CYGWIN" "nodosfilewarning")
    #+end_src

    #+RESULTS:
    : nodosfilewarning

*** open stree map 
    [2015-01-21 Wed 14:39]
    
    #+begin_src emacs-lisp

(defun omap_bbox (minlon minlat maxlon maxlat)
  "generate to hyperlink and also view an area in openstreemap.  
the area is defined by the bounding box. "
;;   (interactive)
  (let ((address (concat  "http://www.openstreetmap.org/?"
           "minlon=" (number-to-string minlon) "&"
           "minlat=" (number-to-string minlat) "&"
           "maxlon=" (number-to-string maxlon) "&"
           "maxlat=" (number-to-string maxlat) "&")))
    (browse-url address)
    (kill-new address)))


(defun omap_point (lon lat)
;;  (interactive)
  (let ((address (concat  "http://www.openstreetmap.org/?"
                          "mlat=" (number-to-string lat) "&"
                          "mlon=" (number-to-string lon))))
    (browse-url address)
    (kill-new address)))

(defun omap_site (site)
;;  (interactive)
  (let ((address (concat "http://nominatim.openstreetmap.org/search.php?q=" site)))
    (browse-url address)
    (kill-new address)))

(defun omap (arg)
;;  (interactive)
  (cond ((= 1 (length arg))
         (omap_site (nth 0 arg)))
        ((= 2 (length arg))
         (omap_point (nth 0 arg) (nth 1 arg)))
        ((= 4 (length arg))
         (omap_bbox (nth 0 arg)
                     (nth 1 arg)
                     (nth 2 arg)
                     (nth 3 arg)))
        (t "nope")))

;; (omap '(-0.489 51.28 0.236 51.686)) ;; london area
;; http://www.openstreetmap.org/?minlon=-0.489&minlat=51.28&maxlon=0.236&maxlat=51.686&
;; (omap '(-76.3412 38.6710)) ;; New york 
;; http://www.openstreetmap.org/?mlat=38.671&mlon=-76.3412
;; (omap '("UK"))  ;; UK, obvs 
;; http://nominatim.openstreetmap.org/search.php?q=UK
         
    #+end_src

    #+results:
    : omap

** Emacs Looks Cool
   [2015-01-19 Mon 12:16]
*** Modeline

#+begin_src emacs-lisp 
(setq powerline-arrow-shape 'curve)
(setq powerline-default-separator-dir '(right . left))
;; These two lines you really need.
(setq sml/theme 'powerline)
(sml/setup)


(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(show-paren-mode t) ;for Emacs
(require 'cl-lib)
(require 'color)
(cl-loop
 for index from 1 to rainbow-delimiters-max-face-count
 do
 (let ((face (intern (format "rainbow-delimiters-depth-%d-face" index))))
   (cl-callf color-saturate-name (face-foreground face) 30)))
#+end_src

#+results:

    #+begin_src emacs-lisp 

;; ;; copy from http://amitp.blogspot.co.uk/2011/08/emacs-custom-mode-line.html
;; ;; Mode line setup 'prog-mode-hook 'rainbow-delimiters-mode)

(load-theme 'zenburn t)
;; font
(set-default-font "Source Code Pro")
(set-face-attribute 'default nil :height 90)

(tool-bar-mode -1)
 (menu-bar-mode -1)
 (scroll-bar-mode -1)


    #+end_src

    #+results:

    
    
    
    
    
    
    #+end_src
** Completion and Selection 
   [2015-01-23 Fri 18:44]
*** Helm - Fuzzy Match  
[2015-02-22 Sun 11:40]

#+begin_src emacs-lisp 
(require 'helm)
(require 'helm-config)

;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

;; (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
;; (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
;; (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)

(setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

(global-set-key (kbd "M-y") 'helm-show-kill-ring)

(global-set-key (kbd "C-x b") 'helm-mini)
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)

(global-set-key (kbd "C-c h o") 'helm-occur)


(global-set-key (kbd "C-h a") 'helm-apropos)
(setq helm-apropos-fuzzy-match t)

(setq helm-semantic-fuzzy-match t
      helm-imenu-fuzzy-match    t)

(helm-mode 1)


;;;; helm-swoop 
(require 'helm-swoop)
;; Change the keybinds to whatever you like :)
;; (global-set-key (kbd "M-i") 'helm-swoop)
;; (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
;; (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
;; (global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)
(global-set-key (kbd "<f1>") 'helm-swoop)
;; When doing isearch, hand the word over to helm-swoop
;; (define-key isearchp-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
;; From helm-swoop to helm-multi-swoop-all
;; (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
;; When doing evil-search, hand the word over to helm-swoop
;; (define-key evil-motion-state-map (kbd "M-i") 'helm-swoop-from-evil-search)

;; Save buffer when helm-multi-swoop-edit complete
(setq helm-multi-swoop-edit-save t)

;; If this value is t, split window inside the current window
(setq helm-swoop-split-with-multiple-windows nil)

;; Split direcion. 'split-window-vertically or 'split-window-horizontally
(setq helm-swoop-split-direction 'split-window-vertically)

;; If nil, you can slightly boost invoke speed in exchange for text color
(setq helm-swoop-speed-or-color nil)
;; ----------------------------------------------------------------------

    #+end_src

**** The Helm Way - What I learnt today  
:LOGBOOK:  
CLOCK: [2015-02-22 Sun 13:00]--[2015-02-22 Sun 15:19] =>  2:19
:END:      
[2015-02-22 Sun 13:51]

What I learnt today 

- helm-mini :: what I wanted, combine recentf with opening buffers.  so that I don't need to swithc between C-b or C-r to find a file.  
               (global-set-key (kbd "C-x b") 'helm-mini)
(setq helm-buffers-fuzzy-matching t
helm-recentf-fuzzy-match    t)
- helm-find-files :: it is better than what I have been using and don't know that find-file with helm completion.  it provides the full functionality of Helm framework.  it is now bind with =C-x C-f=
                    
- helm-show-king-ring :: shows all the kill-ring so that I can see and select, and avoid working with invisiable kill-ring.  also,  I can filter and then select.
- helm-occur :: a alternative to helm-swoop, haven't figure out which is fits in better in current workflow and it will changed by sematics.
- helm-semantic-or-imenu :: tells vairbale, functions, dependeices etc for a langauge.  it is really powerful:  shows types function headers in a minibuffer and I can glismps the interface of the all the functions, dependences etc.  
     haven't tried it yet in R.  previouslh, I use helm-swoop on /library/, /<- function(.)/, /save/ to do that.  the advantange of semantic is that 1) do it once, 2) tags are grouped, 3) jump quickly 4) helm framework.  I would like to have a Sematic works in R langauge, and configure it to have
  - dependence section, highlight lines with =library=, =sfLibrary=.
  - function section, highlight lines with /. <- function( . )/
  - variable section, highlight lines with /xxx <- yyy/ 
  - I/O section, that highlights =load=, =read.csv= etc and =save=, =write.csv= etc.
- helm-top :: it provides Helm interface for =top= program.  I don't need to fire up a shell buffer.  handy key-bindings to sort by CPU/Memory/user.  It would be nice to have run this function on a remote serer.
- helm-google-suggest :: search on google in Emacs.  I don't need to swtich to browser app as it will do it autoamticlaly.
- helm-man-woman :: view the man page for a command in Emacs.  the command is selected by Helm.  it's nice to expand it to R/Emacs-Lisp language. 
  1. invoke helm-man-women,
  2. it shows up all the commands that is in the source,
  3. filter out all except R command by type =*R=,
  4. select a particular command, see =library=, 

  it's likely for someone use same langauge over a time period, 2-3 hours, then it is useful to keep the prefix =*R= from last call, by provide a variable, say =helm-man-women-remember=, and set it to true. 
- helm-apropos :: it able me to search for funciton, variable, faces in one command but for key-bindings, I still need to use =C-h k=.
- helm-info-* :: want to know what options I have to generate a clock-table in org-mode? invoke helm-info-org and search pattern /clocktable/ and it brings me exactly the line that has /clocktable/! how convinenty is that? it will change my workflow in referencing, and no need to googling and navigate in the org-mode manual.
- helm-calcul-expression :: a handy calculator in Emacs, the results shows in the echo area.  

There are two commands I wold like to use in the future, =helm-find= and =helm-locate= to find/locate files.  




*** ace-jump 

#+begin_src emacs-lisp 
(global-set-key (kbd "C-c w") 'ace-jump-word-mode)
#+end_src

#+results:


*** Multi-Cursor - Multiple Selection 
    [2015-01-19 Mon 12:10]
    
    
    #+begin_src emacs-lisp

(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
;; (global-set-key (kbd "C->") 'mc/mark-next-like-this)
;; (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
;; (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
(global-set-key (kbd "C-S-<right>") 'mc/mark-next-like-this)
(global-set-key (kbd "C-S-<left>") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

    #+end_src
    
*** Expand-Region - Incremental Selection
    [2015-01-20 Tue 07:47]
    
    #+begin_src emacs-lisp
;; [[https://github.com/magnars/expand-region.el][expand-region]]
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)

    #+end_src
** ESS - Emacs Speaks Statistics
   :LOGBOOK:  
   CLOCK: [2015-01-28 Wed 06:09]--[2015-01-28 Wed 07:55] =>  1:46
   :END:      
   :PROPERTIES: 
   :EXPORT_TITLE: Why Use Emacs 1 - Emacs Speaks Statistics (ESS)
   :END:      
   
   I am a Statistician, coding in R and write report is what I do most of the day.  I have been though a long way of searching the perfect editor for me, tried Rstudio, SublimeText, TextMate and settled down happily with ESS/Emacs, for both coding and writing. 
   
   There three features that have me made the decision: 
   
1. Auto Formatting 
   
   Scientists has reputation of being bad programmers, who wrote the code that is unreadable and therefore incomprehensible to others.  I have intention to become top level programmer and followed a style guide strictly.  It means I have to spent sometime in adding and removing space in the code.
   
   To my surprise, Emacs will do it for me automatically, just by hitting the TAB and it also indent smartly, which make me conformable to write long function call and split it into multiple lines.  Here's an example.  Also if I miss placed a ')' or ']' the formatting will become strange and it reminders me to check.   
   
   #+begin_src R :eval no
   rainfall.subset <- data.table(rainfall.london,
                                 rainfall.pairs,
                                 rainfall.dublin)

   #+end_src
   
1. Search Command History
   
   I frequently search the command history. Imaging I was produce a plot and I realised there was something miss in the data, so I go back and  fix the data first, then run the ggplot command again, I press Up/Down bottom many times, or just search once/two times. =M-x ggplot(=  will gives me the most recent command I typed containing the keyword /ggplot(/, then I press =RET= to select the command, which might be =ggplot(gg.df, aes(lon, lat, col = city)) + geom_line() + .....=.  If it is not I want, I press =C-r= again to choose the second most recent one and repeat until I find right one.  
   
2. Literate Programming 
   
   I am an supporter of literate statistical analysis and believe we should put code, results and discoveries together in developing models. Rstudio provides an easy to use tool for this purpose, but it does not support different R sessions, so if I need to generate a report, I have to re-run all the code from beginning, which isn't particle for me with volumes data because it will take quit long. 
   
   ESS and org-mode works really well via Babel, which is more friendly to use.  I can choose to run only part of the code and have the output being inserted automatically, no need to copy/paste.  Also, I can choose where to execute the code, on my local machine or the remote server, or both at the same time.
   
These are only the surface of ESS and there are lot more useful features like spell checking for comments and documentation templates, that makes me productive and I would recommend anyone use R to learn ESS/Emacs.  The following is my current setting. 
#+begin_src emacs-lisp
  ;; Adapted with one minor change from Felipe Salazar at
  ;; http://www.emacswiki.org/emacs/EmacsSpeaksStatistics
  (require 'ess-site)
  (setq ess-ask-for-ess-directory nil) ;; start R on default folder
  (setq ess-local-process-name "R")
  (setq ansi-color-for-comint-mode 'filter) ;;
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)
  (setq ess-eval-visibly-p 'nowait) ;; no waiting while ess evalating
  (defun my-ess-start-R ()
    (interactive)
    (if (not (member "*R*" (mapcar (function buffer-name) (buffer-list))))
        (progn
          (delete-other-windows)
          (setq w1 (selected-window))
          (setq w1name (buffer-name))
          (setq w2 (split-window w1 nil t))
          (R)
          (set-window-buffer w2 "*R*")
          (set-window-buffer w1 w1name))))
  (defun my-ess-eval ()
    (interactive)
    (my-ess-start-R)
    (if (and transient-mark-mode mark-active)
        (call-interactively 'ess-eval-region)
      (call-interactively 'ess-eval-line-and-step)))
  (add-hook 'ess-mode-hook
            '(lambda()
               (local-set-key [(shift return)] 'my-ess-eval)))
  (add-hook 'inferior-ess-mode-hook
            '(lambda()
               (local-set-key [C-up] 'comint-previous-input)
               (local-set-key [C-down] 'comint-next-input)))
  (add-hook 'ess-mode-hook
            (lambda ()
              (flyspell-prog-mode)
              (run-hooks 'prog-mode-hook)
              ;; (prog-mode)
              ))

  ;; REF: http://stackoverflow.com/questions/2901198/useful-keyboard-shortcuts-and-tips-for-ess-r
  ;; Control and up/down arrow keys to search history with matching what you've already typed:
  (define-key comint-mode-map [C-up] 'comint-previous-matching-input-from-input)
  (define-key comint-mode-map [C-down] 'comint-next-matching-input-from-input)

  ;; edit roxy template
  ;; ess-roxy-update-entry
  ;; (add-to-list ess-roxy-template-alist '(("description" . "content for description")
  ;;                                 ("details" . "content for details")
  ;;                                 ("title" . "")
  ;;                                 ("param" . "")
  ;;                                 ("return" . "")
  ;;                                 ("export" . "")
  ;;                                 ("author" . "Yi Tang")))
#+end_src

#+RESULTS:
: comint-next-matching-input-from-input

*** Programming Mode 
    After 2014, Emacs comes a prog-mode, for programming langauge.  it is generic mode, just like text-mode, that sits underneth all the programming language, either R, phython, C++ etc.  The good thinkg to have this concept is that we can define few things that will apply to all these mode, when we write scripts.  
    
    One thing I find particulaar usefull and necessary is to highliht  characters in comments that has particullar meaning, like TODO, FIXME or other.  which can be particular handy in code reivew, I can navite and jump between the code quickly. 
    
    #+begin_src emacs-lisp
;; highlights FIXME: TODO: and BUG: in prog-mode 
(add-hook 'prog-mode-hook
          (lambda ()
            (font-lock-add-keywords nil
                                    '(("\\<\\(YT\\|FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))

    #+end_src 
    
    we usually have long scripts, and in Subimetext, one cold folder and unfolder a function. in Emacs, this feature could be extended to furture, by define folder-characters.  at this statge, I tented to used the deafault, I.e. folder functions only.  in the folliwng setting, I could press =F3= to folder/unfolder a function, =C-F3= or =S-F3= to folder/unfolder all functions. 
    
    one potentially solution is to use =org-strct-mode=, to show/hide the whole section, I havne;t tryied it before, but it sounds a good idea.
    
    #+begin_src emacs-lisp 
(add-hook 'prog-mode-hook 'hs-minor-mode)
(global-set-key (kbd "<f3>") 'hs-toggle-hiding)
(global-set-key (kbd "S-<f3>") 'hs-show-all) ;; S->show 
(global-set-key (kbd "C-<f3>") 'hs-hide-all) 
;;   hs-hide-block                      C-c @ C-h
;;   hs-show-block                      C-c @ C-s
;;   hs-hide-all                        C-c @ C-M-h
;;   hs-show-all                        C-c @ C-M-s
;;   hs-hide-level                      C-c @ C-l
;;   hs-toggle-hiding 
;;   hs-mouse-toggle-hiding             [(shift mouse-2)]
;;   hs-hide-initial-comment-block

(global-set-key (kbd "C-d") 'comment-region) ;; overwite delete-char 
(global-set-key (kbd "C-S-d") 'uncomment-region)

    #+end_src
    
*** Documentation  
    [2015-01-23 Fri 17:53]
    #+begin_src emacs-lisp
;; edit roxy template
;; ess-roxy-update-entry
;; (setq ess-roxy-template-alist '(("description" . " content for description")
;;                                 ("details" . "content for details")
;;                                 ("title" . "")
;;                                 ("param" . "")
;;                                 ("return" . "")
;;                                 ("export" . "")
;;                                 ("author" . "Yi Tang")))
    #+end_src
    
    
*** R Style Check - Flycheck 
    [2015-01-20 Tue 10:49]
    
    https://github.com/jimhester/lintr
    
    #+begin_src emacs-lisp
(require 'flycheck)
(add-hook 'ess-mode-hook
          (lambda () (flycheck-mode t)))
(load "~/git/.emacs.d/lisp/lintr.el")
    #+end_src
*** Remote R Sessions 
    [2015-01-23 Fri 19:00]
*** R code oranise
    [2015-02-12 Thu 20:39]
    

    

** File Manager 
   [2015-01-23 Fri 18:52]
*** Alternative to shell 
    [2015-01-28 Wed 07:46]
    
    #+begin_src emacs-lisp
(defun rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))

    #+end_src
*** Projectile - Directory Access 
    [2015-01-19 Mon 12:08]

    #+begin_src emacs-lisp
(require 'projectile)
(require 'helm-projectile)
(projectile-global-mode)
(setq projectile-enable-caching t)
(setq projectile-switch-project-action 'projectile-dired)
(setq projectile-remember-window-configs t )
(setq projectile-completion-system 'helm)
    #+end_src
*** dired - File Operation 
    [2015-01-23 Fri 18:53]
*** Remote (SSH)
    [2015-01-22 Thu 23:11]

    #+begin_src emacs-lisp
(require 'tramp)
(require 'ssh)
(defun yt/sync-local-remote ()
  (interactive)
  "copy all files in remote:~/LR_share to local:~/LR_share,
does not support the ther way"
  (find-file "/ssh:JBA28:/home/local/JBANORTHWEST/yitang/LR_share")
  ;; (mark-whole-buffer)
  (dired-mark-subdir-files)
  ;; (find-file "~/LR_share")
  ;; (setq-local dirqed-dwim-target t)
  (dired-do-copy))

    #+end_src
*** Git Sync
    :LOGBOOK:  
    CLOCK: [2015-01-25 Sun 21:15]--[2015-01-25 Sun 22:25] =>  1:10
    :END:      
    [2015-01-19 Mon 12:09]
    
    
    Magit is an amazing package, it used to use command line for lal git work, and usually a task involve a series of command.  it good for a beginning to learn, by repeat each command agaigna and aigagnain, and hwo to combine them and do a complex task.  but onec I familaried with it, it is not necessary to do it anymore.  This is why I start to use Magit.  it is an absolute aamzing package, it is intuitive, it is the GUI, the command to use etc.  I would highly recommand it, even to someone has very bsic knowldege of Git, you can find a manuam at http://magit.github.io/master/magit.html and cheatsheet http://daemianmack.com/magit-cheatsheet.html
    
    #+begin_src emacs-lisp

;; backup git repo automatically 
;; git
(require 'magit)

    #+end_src 
    
    I use Emacs/org-mode as a unified system to do everything, at home, on Macbook Pro, on office, Windows/Ubuntu.  I used to use Dropbox/Copy to automateally synised the files onm ulti machine, and oceanally I used the time machine feature to find missing files, and also, files are got overwritted, I lose track.
    
    the good thing about Git is that yoou can see what exactlly has been changed by each version, and auto log, with commit information and timesatmp.  Magit helps me to do ti conviently but I need 3 more features: 
1. automatically save all the buffers
   I have been runing into the sitatuion that my office machine was frzzee, beacuse of Big Data and I push R to the limits, and I potentially will lose the newstest version of sripcts.  which is bit annoy.
2. office rush,
   I shared lift with my coluge, and someimes, I just need to go, and go now! than what I did is  to call a function that will deal with commits, update, and upload.
3. automatically commit 
   few times I did some work over the weenend and night, and I want to udpate to my colluge, but I gotget to sync, or push to the cloud... which is quit embarralse. 
   
#+begin_src emacs-lisp
  ;; backup git repo automatically 
  ;; git
  (setq git-sh-scripts "
  echo Start to Sync: $(date) 

  REPOS=\"org jbarm\"
  for REPO in $REPOS
  do
      echo
      echo \"Repository: $REPO\"
      cd ~/git/$REPO
      # update
      git pull 
      # Remove deleted files
      git ls-files --deleted -z | xargs -0 git rm >/dev/null 2>&1
      # Add new files
      git add -A . >/dev/null 2>&1
      git commit -m \"$(date)\"
      git push origin master 
  done

  echo Finished Sync: $(date)
  ")

  (defun yt/git-backup ()
    (interactive)
    ;;  (call-process-shell-command "~/git/AutoCommit.sh" nil nil t)
    ;; (start-process-shell-command "git-sync" "*AutoSync*" "~/git/org/AutoSync.sh")
    (async-shell-command git-sh-scripts)
    (message "all git sync... done"))
  (defun yt/save-all-buffers ()
    "save all files-visiting buffers without user confirmation"
    (interactive)
    (save-some-buffers t nil)
    (message "save all buffers... done"))
  (defun yt/save-git-backup ()
    (interactive)
    (yt/save-all-buffers)
  ;;  (display-buffer "*AutoSync*")
    (yt/git-backup))

  ;; (cond ((eq system-type 'darwin)
  ;; (run-at-time "05:59" 10800 'yt/save-git-backup)))






#+end_src

** mu4e - Email Client
   
   The advantage of use Emacs as an email client: 
   
1. communication happens at the point where the content is genreated. 
   as a statisician/programmer, most likely I need to mmunicate with numbers, table, graphs, or snippet.  I could just copy these results from to email, do an quickly editing.  
2. HTML email with CSS style.  
   I like to formate my email use headingline, fonts, and highlhgit the code, I used to be write a report in Word/LatEx and write an email with only onbe line, please see the attachment.  which I don't like. 
3. search properly 
   I use search all the time, and this functionality is not working at all in outlkooik 2013, it also shows up random info (mail.app in osx did a great job).  
   
Disadvantage / can;t do: 
1. don't expect me to reply immediately 
   this is how does it works: 1. download the email from server, 2) index with head, body, attachment, user name etc.  3) Emacs talk to and show in GUI.  I usually update the meail about 30 imnutes.  but I helps me out of disrupts.
2. book Meeting/Appointment 
   I didn't aware that you can do it in emacs, and we need an iterative way to do.  Outlook Schedule Asistant do a good job, it list agenda of all attendence, and I could spot oen time slot that suit for all or most people. 
3. calendar 
   I don't know how to integrate Office 365 calendar with Org-mode calandar yet.  even it can, I doubt I can download and see other people's agenda. 
   
This setting need two programms to work: 1) mu, 2) offlineimap. 

#+begin_src emacs-lisp
;; usage:
;; $ offlineimap
;; $ mu index
;; M-x mu4e
;; from mu's official manual 
;;----------------------------------------------------------
(add-to-list 'load-path "~/mu-master/mu4e")
(require 'mu4e)
(setq mu4e-mu-binary "/usr/local/bin/mu")
;; default

;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'sent)

;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "offlineimap -a JBA")
(setq mu4e-update-interval 300)

;; sending mail -- replace USERNAME with your gmail username
;; also, make sure the gnutls command line utils are installed
;; package 'gnutls-bin' in Debian/Ubuntu
(setq smtpmail-default-smtp-server "smtpserver") ; needs to be specified before the (require)
(require 'smtpmail)


;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)

;; use 'fancy' non-ascii characters in various places in mu4e
(setq mu4e-use-fancy-chars t)
;; save attachment to my desktop (this can also be a function)
(setq mu4e-attachment-dir "~/Desktop")
;; attempt to show images when viewing messages
(setq mu4e-view-show-images t
      mu4e-show-images t
      mu4e-view-image-max-width 800)


(setq mu4e-html2text-command "html2text -utf8 -width 72") ;; nil "Shel command that converts HTML
;; yt
(setq mu4e-view-prefer-html t) ;; try to render 
(add-to-list 'mu4e-view-actions 
             '("ViewInBrowser" . mu4e-action-view-in-browser) t) ;; read in browser 
;; mu4e as default email agent in emacs
(setq mail-user-agent 'mu4e-user-agent)
(require 'org-mu4e)
                                        ;== M-x org-mu4e-compose-org-mode==
(setq org-mu4e-convert-to-html t) ;; org -> html
                                        ; = M-m C-c.= 

#+end_src 


*** Account 
[2015-01-23 Fri 17:32]
set up email account, use office 365 in the office, and iCloud at macbook por. 

#+begin_src emacs-lisp 
;;;
(defun yt/mail-office-setting ()
  (setq message-send-mail-function 'smtpmail-send-it
        smtpmail-stream-type 'starttls
        smtpmail-default-smtp-server "smtp.office365.com"
        smtpmail-smtp-server "smtp.office365.com"
        smtpmail-smtp-service 587
        smtpmail-smtp-user "yi.tang@jbarisk.com"
        user-mail-address "yi.tang@jbarisk.com"
        user-full-name  "Yi Tang"
        mu4e-drafts-folder "/JBA/Drafts"
        mu4e-sent-folder   "/JBA/Sent Items"
        mu4e-trash-folder  "/JBA/Trash"
        mu4e-maildir-shortcuts  '(("/JBA/INBOX"    . ?i)
                                  ("/Sent Items"   . ?s)
                                  ("/Trash"        . ?t)
                                  ("/All Mail"     . ?a))
        mu4e-compose-signature (concat
                                "Yi Tang\n"
                                "Statistician\n"
                                "T: +44 (0) 1756 799919\n")))

(defun yt/mail-home-setting ()
  (setq message-send-mail-function 'smtpmail-send-it
        smtpmail-stream-type 'starttls
        smtpmail-default-smtp-server "smtp.mail.me.com"
        smtpmail-smtp-server "smtp.mail.me.com"
        smtpmail-smtp-service 587
        smtpmail-smtp-user "yi.tang.uk@me.com"
        user-mail-address "yi.tang.uk@me.com"
        user-full-name  "Yi Tang"
        mu4e-compose-signature (concat
                                "唐毅 (Yi Tang)\n"
                                "Email: yi.tang.uk@me.com\n"
                                "\n")
        )
  (setq mu4e-maildir "~/Maildir")
  (setq mu4e-drafts-folder "/iCloud/Drafts")
  (setq mu4e-sent-folder   "/iCloud/Sent Messages")
  (setq mu4e-trash-folder  "/iCloud/Deleted Messages"))

(cond ((eq system-type 'darwin)
       (yt/mail-home-setting))
      ((eq system-type 'gnu/linux)
       (yt/mail-office-setting)))

;; (defun yt/mail-setup () 
;;   (interactive)
;;   (cond
;;    ((eq system-type 'gnu/linux)
;;     (setq message-send-mail-function 'smtpmail-send-it
;;           smtpmail-stream-type 'starttls
;;           smtpmail-default-smtp-server "smtp.office365.com"
;;           smtpmail-smtp-server "smtp.office365.com"
;;           smtpmail-smtp-service 587
;;           smtpmail-smtp-user "yi.tang@jbarisk.com"
;;           user-mail-address "yi.tang@jbarisk.com"
;;           user-full-name  "Yi Tang"
;;           mu4e-drafts-folder "/Drafts"
;;           mu4e-sent-folder   "/Sent Items"
;;           mu4e-trash-folder  "/Trash"
;;           mu4e-maildir-shortcuts  '(("/JBA/INBOX"    . ?i)
;;                                     ("/Sent Items"   . ?s)
;;                                     ("/Trash"        . ?t)
;;                                     ("/All Mail"     . ?a))
;;           message-signature
;;           (concat
;;            "Yi Tang\n"
;;            "Statistician\n"
;;            "T: +44 (0) 1756 799919\n")
;;           )
;;     (message "sent email via office365 email account"))
;;    ((eq system-type 'darwin)
;;     (setq message-send-mail-function 'smtpmail-send-it
;;           smtpmail-stream-type 'starttls
;;           smtpmail-default-smtp-server "smtp.mail.me.com"
;;           smtpmail-smtp-server "smtp.mail.me.com"
;;           smtpmail-smtp-service 587
;;           smtpmail-smtp-user "yi.tang.uk@me.com"
;;           user-mail-address "yi.tang.uk@me.com"
;;           user-full-name  "Yi Tang"
;;           message-signature
;;           (concat
;;            "唐毅 (Yi Tang)\n"
;;            "Email: yi.tang.uk@me.com\n"
;;            "\n")
;;           )
;;     (setq mu4e-maildir "~/Maildir")
;;     (setq mu4e-drafts-folder "/iCloud/Drafts")
;;     (setq mu4e-sent-folder   "/iCloud/Sent Messages")
;;     (setq mu4e-trash-folder  "/iCloud/Deleted Messages")

;;     (setq mu4e-maildir-shortcuts
;;           '( ("/iCloud/INBOX"               . ?i)
;;          ("/iCloud/Sent Messages"   . ?s)
;;          ("/iCloud/Deleted Messages"       . ?t)
;;          ;; ("/iCloud.All Mail"    . ?a)
;;          ))

;;     (message "sent email via icloud email account"))
;;    ))
;; (yt/mail-setup)


#+end_src 

when I sent an email, it will promote and ask for email, I only need type once per Emacs session, also, I can save the password to an /.authoty/ file. 
*** Contacts 
[2015-01-23 Fri 17:28]
have problem with BBDB installtion, and use org-contact.el to manage contact.  add contactor very easy. I cna use tab to completet contacts, which is really handy.

#+begin_src emacs-lisp
(require 'org-contacts)
(setq mu4e-org-contacts-file  "~/git/org/contacts.org")
;; (add-to-list 'mu4e-headers-actions
;;              '("org-contact-add" . mu4e-action-add-org-contact) t)
;; (add-to-list 'mu4e-view-actions
;;              '("org-contact-add" . mu4e-action-add-org-contact) t)
#+end_src 

#+results:

*** Workflow
[2015-01-23 Fri 17:28]

I am trying to avoid use =C-x m= to write/sent email directy, unless it is really short. otherwise, if it relates to a project, I will make an org headline to keep track the project communciation, to do that,  I compose email/message in org mode, then sent the whole subtree by =C-c M-o=.
#+begin_src emacs-lisp

;;;; [2015-01-14 Wed 22:32]
;; org-mime
(require 'org-mime)
(setq org-mime-library 'mml)
(add-hook 'message-mode-hook
          (lambda ()
            (local-set-key "\C-c\M-o" 'org-mime-htmlize)))
(add-hook 'org-mode-hook
          (lambda ()
            (local-set-key "\C-c\M-o" 'org-mime-org-buffer-htmlize)))
(add-hook 'org-mime-html-hook
          (lambda ()
            (insert-file-contents "~/git/.emacs.d/style/office.css")
            ;; (goto-char 5)
            )
          t)


(add-hook 'org-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c M-o") 'org-mime-subtree))
          'append)

#+end_src

just in case I didn't get the format right at the first place and need some quick fix in message mode, save me few seconds in going back to org-mode.

#+begin_src emacs-lisp
(add-hook 'message-mode-hook 'orgstruct++-mode 'append)
(add-hook 'message-mode-hook 'turn-on-auto-fill 'append)
;; (add-hook 'message-mode-hook 'bbdb-define-all-aliases 'append)
(add-hook 'message-mode-hook 'orgtbl-mode 'append)
(add-hook 'message-mode-hook 'turn-on-flyspell 'append)
;; (add-hook 'message-mode-hook
;;           '(lambda () (setq fill-column 270))
;;           'append)

#+end_src
*** TODO Comprehensive Email   
[2015-01-23 Fri 14:36]

*Attach and Inline Image* 
I got an email from an estate agency where there are few images are inlined, but also in the attachment.  why not just save the attachment online and inline the image as a normal HTML do? 

1) add an png attachment, display it as inline image.  

*Render LaTeX code as image*
currently it is broken.  the error message is the path issues, and seems the file is not generated. 

** Writing in Emacs 
[2015-01-19 Mon 12:11]
*** English Language 
[2015-01-23 Fri 17:43]

I type quit fast with lots of misspell and in writing, I don't need to correct every single one when writing, which will stop the flow.  I will do it afterwards in editing, I will press =C-,= to move the cursor to next misspelled word, and press =C-.= to correcct it, press it again, to correct it to another words.  

#+begin_src emacs-lisp
;; check spelling  
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'org-mode-hook 'flyspell-mode)
(setq ispell-dictionary "british"
      ispell-extra-args '() ;; TeX mode "-t"
      ispell-silently-savep t)
#+end_src 

I need an grammar check to let me know that 
#+begin_example
Have you done ...
#+end_example
is wrong, and also tell me why and which is right.  =langtool= can do be the job, but currently I don't understand how to get it works. 


#+begin_src emacs-lisp
;; check grammar 
(require 'langtool)
(setq langtool-language-tool-jar "~/Java/LanguageTool-2.8/languagetool-commandline.jar")
(setq langtool-mother-tongue "en")

;; avoid xxx words 
;; (require 'artbollocks-mode)
;; (add-hook 'text-mode-hook 'artbollocks-mode)
;; (setq artbollocks-weasel-words-regex
;;       (concat "\\b" (regexp-opt
;;                      '("one of the"
;;                        "should"
;;                        "just"
;;                        "sort of"
;;                        "a lot"
;;                        "probably"
;;                        "maybe"
;;                        "perhaps"
;;                        "I think"
;;                        "really"
;;                        "pretty"
;;                        "nice"
;;                        "action"
;;                        "utilize"
;;                        "leverage") t) "\\b"))


;; [2014-12-25 Thu 22:21]
(defun yt/write-mode ()
  (interactive)
  (hl-sentence-mode)
  (variable-pitch-mode)
  (nanowrimo-mode))

;; word count
;; https://bitbucket.org/gvol/nanowrimo.el
(require 'org-wc)
(require 'nanowrimo)
(setq nanowrimo-today-goal 500)


;; [2014-12-23 Tue 22:06]
;; Highlight sentence
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html
(require 'hl-sentence)
(add-hook 'nanowrimo-mode 'hl-sentence-mode)
(set-face-attribute 'hl-sentence-face nil
                    ;; :foreground "black")
                    :foreground "white")
(add-hook 'nanowrimo-mode 'variable-pitch-mode)
(set-face-attribute 'variable-pitch nil
                    :foreground "gray40")

;; [2015-02-12 Thu 21:14]
;; https://github.com/rootzlevel/synosaurus
;; synosaurus-lookup
;; synosaurus-choose-and-replace
;; brew install wordnet
(require 'synosaurus)
(setq synosaurus-choose-method "popup")

#+end_src

*** Random Quotes 
[2015-01-22 Thu 23:14]
If I run out of idea, and I didn't write anthing for 1 minutes, Emacs will pop a quote that I collected in the echo area.  the random quotes may gives me some inpisration sometimes.  
#+begin_src emacs-lisp
(defconst yt/quotes
  '("You can't see paradise, if you don't pedal.  - Chicken Run "
    "He who who says he can and he who says he can’t are both usually right ― Confucius"
    )
  "Good quotes 
   they can be useful for creative writers as well.")
(defun yt/show-random-quotes ()
  "Show random quotes to minibuffer"
  (interactive)
  (message "%s"
           (nth (random (length yt/quotes))
                yt/quotes)))
(run-with-idle-timer 60 t 'yt/show-random-quotes)

#+end_src

*** Abbreviation 
I have been writing in Emacs/org-mode a lot, have been really tired of capitalise I to I, so I use abbrevitation table, 

#+NAME: my-text-abbrevs
| name      | expand            | Category |
|-----------+-------------------+----------|
| i         | I                 | write    |
| amax      | annual maximum    | stat     |
| gmap      | google map        | website  |
| mailme    | yi.tang.uk@me.com | aboutme  |
| twitterme | @yi_tang_uk       | aboutme  |
| iif       | if and only if    | maths    |


#+begin_src emacs-lisp :var my-text-abbrevs=my-text-abbrevs :eval yes :colnames yes :hlines no 
(defun my-text-abbrev-expand-p ()
  "Return t if the abbrev is in a text context, which is: in
 comments and strings only when in a prog-mode derived-mode or
 src block in org-mode, and anywhere else."
  (if (or (derived-mode-p 'prog-mode)
          (and (eq major-mode 'org-mode)
               (org-in-src-block-p 'inside)))
      (nth 8 (syntax-ppss))
    t))

(define-abbrev-table 'my-text-abbrev-table ()
  "Abbrev table for text-only abbrevs. Expands only in comments and strings."
  :enable-function #'my-text-abbrev-expand-p)

(dolist (table (list text-mode-abbrev-table
                     prog-mode-abbrev-table))
  (abbrev-table-put table
                    :parents (list my-text-abbrev-table)))

;; Bug fix for python and lisp modes who's abbrev tables aren't set up correctly:

;; (eval-after-load "python"
;;   (abbrev-table-put python-mode-abbrev-table
;;                     :parents (list my-text-abbrev-table
;;                                    python-mode-skeleton-abbrev-table)))

;; (eval-after-load "lisp-mode"
;;   (abbrev-table-put lisp-mode-abbrev-table
;;                     :parents (list my-text-abbrev-table)))

;; Our only expansion, so far...

;; (define-abbrev my-text-abbrev-table "i" "I" nil :system t)


(defun my-text-abbrev-table-init (abbrevs-org-list)
  "Parse 'name: expansion' pairs from an org list and insert into abbrev table."
  (message "Creating text-abbrev table...")
  (dolist (abbrev abbrevs-org-list)
    (let ((name (nth 0 abbrev))
          (expansion (nth 1 abbrev)))
      ;; (print (cons name expansion))
      (define-abbrev my-text-abbrev-table name expansion nil :system t))))
(my-text-abbrev-table-init my-text-abbrevs)
#+end_src

#+results:

** Org mode
I started to learn Emacs by reading Bernt Hansen's  [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
*** Bernt Hansen's Setting                                       :noexport:
:LOGBOOK:  
CLOCK: [2015-01-23 Fri 16:34]--[2015-01-23 Fri 17:36] =>  1:02
:END:      
[2015-01-23 Fri 10:32]
#+begin_src emacs-lisp
(require 'org)
(require 'org-habit)
(setq org-agenda-files '("~/git/org/" "~/git/jbarm"))

(defun yt/setup-office-agenda ()
  (interactive)
  (setq org-agenda-files '("~/git/jbarm")))
(defun yt/setup-home-agenda ()
  (interactive)
  (setq org-agenda-files '("~/git/org")))
(defun yt/setup-home-and-office-agenda ()
  (interactive)
  (setq org-agenda-files '("~/git/org/" "~/git/jbarm")))


;; Standard key bindings
(global-set-key "\C-c l" 'org-store-link);; C-c C-l is defualt, 
(global-set-key "\C-c a" 'org-agenda)
(global-set-key "\C-c b" 'org-iswitchb) ;; switch between org files. < helm recentf


;; Custom Key Bindings
(global-set-key (kbd "<f12>") 'org-agenda)
(global-set-key (kbd "<f5>") 'bh/org-todo)
(global-set-key (kbd "<S-f5>") 'bh/widen)
(global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
(global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
(global-set-key (kbd "<f9> <f9>") 'bh/show-org-agenda)
(global-set-key (kbd "<f9> b") 'bbdb)
(global-set-key (kbd "<f9> c") 'calendar)
;; (global-set-key (kbd "<f9> f") 'boxquote-insert-file)
(global-set-key (kbd "<f9> g") 'gnus)
(global-set-key (kbd "<f9> h") 'bh/hide-other)
(global-set-key (kbd "<f9> n") 'bh/toggle-next-task-display)

(global-set-key (kbd "<f9> I") 'bh/punch-in)
(global-set-key (kbd "<f9> O") 'bh/punch-out)

(global-set-key (kbd "<f9> o") 'bh/make-org-scratch)

(global-set-key (kbd "<f9> r") 'boxquote-region)
(global-set-key (kbd "<f9> s") 'bh/switch-to-scratch)

(global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
(global-set-key (kbd "<f9> T") 'bh/toggle-insert-inactive-timestamp)

(global-set-key (kbd "<f9> v") 'visible-mode)
(global-set-key (kbd "<f9> l") 'org-toggle-link-display)
(global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)
(global-set-key (kbd "C-<f9>") 'previous-buffer)
(global-set-key (kbd "M-<f9>") 'org-toggle-inline-images)
(global-set-key (kbd "C-x n r") 'narrow-to-region)
(global-set-key (kbd "C-<f10>") 'next-buffer)
(global-set-key (kbd "<f11>") 'org-clock-goto)
(global-set-key (kbd "C-<f11>") 'org-clock-in)
(global-set-key (kbd "C-s-<f12>") 'bh/save-then-publish)
(global-set-key (kbd "C-c c") 'org-capture)

(defun bh/hide-other ()
  (interactive)
  (save-excursion
    (org-back-to-heading 'invisible-ok)
    (hide-other)
    (org-cycle)
    (org-cycle)
    (org-cycle)))

(defun bh/set-truncate-lines ()
  "Toggle value of truncate-lines and refresh window display."
  (interactive)
  (setq truncate-lines (not truncate-lines))
  ;; now refresh window display (an idiom from simple.el):
  (save-excursion
    (set-window-start (selected-window)
                      (window-start (selected-window)))))

(defun bh/make-org-scratch ()
  (interactive)
  (find-file "/tmp/publish/scratch.org")
  (gnus-make-directory "/tmp/publish"))

(defun bh/switch-to-scratch ()
  (interactive)
  (switch-to-buffer "*scratch*"))

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "SOMEDAY" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold))))

(setq org-use-fast-todo-selection t) ;; TODO: turn off!, need it. 

(setq org-treat-S-cursor-todo-selection-as-state-change nil) ;; BUG: need to remove S-<left> and <right> from org key map completely, as it used for moving to window.

;; keep todo, done, next (project ongoing), waiting (program running), hold (no process machine), cancel (someone else will do) keyworld .
(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

(setq org-directory (quote ("~/git/jbarm"
                            "~/git/org"))) ;; FIXME: add ~/git/jbarm folder 

(setq org-default-notes-file "~/git/org/refile.org")

;; I use C-c c to start capture mode
(global-set-key (kbd "C-c c") 'org-capture)
(setq org-refile-use-cache t) ;; speed up the process by using cache.
;; mine modication 
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/git/org/refile.org")
               "* TODO %?\n%U\n" :clock-in t :clock-resume t) ;; TODO: %? %U %a, what does these means??? %: %c 
              ("r" "respond" entry (file "~/git/org/refile.org")
               ;; "* NEXT Respond to %^{whom} on %^{subject} \n %? \nSCHEDULED: %t\n%U\n" :clock-in t :clock-resume t :immediate-finish t)
               "* To %? about :RESPONSE:  \nSCHEDULED: %t\n%U\n" :clock-in t :clock-resume t)
              ("n" "note" entry (file "~/git/org/refile.org")
               "* %? :NOTE:\n%U\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "~/git/org/diary.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("m" "Meeting" entry (file "~/git/org/refile.org")
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call" entry (file "~/git/org/refile.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "~/git/org/habits.org")
               "* NEXT %?\n%U\nSCHEDULED: %(format-time-string \"<%Y-%m-%d .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
              ("l" "Ledger entries")
              ;; ("ll" "Lloyas" plain (file+olp "~/git/org/refile.org"  "Finance")
              ("ll" "Lloyas" plain (file "~/git/ImportantFiles/ledger")
               "%(org-read-date) %^{Payee}\n\tExpenses:%^{Account}\t£ %^{Amount}\n\tAssets:Lloyds" :immediate-finish :clock-in t :clock-resume t)
              ;; ("lc" "Cash" plain (file+olp "~/git/org/refile.org"  "Finance")
              ("lc" "Cash" plain (file "~/git/ImportantFiles/ledger")
               "%(org-read-date) * %^{Payee}\n\tExpenses:%^{Account}\t£ %^{Amount}\n\tAssets:Cash" :immediate-finish :clock-in t :clock-resume t)
              ;; quantified self 

              ("f" "Quantified Self")
              ("fp" "Personal Care")
              ("fps" "Shower" entry (file+olp "~/git/org/qs.org" "Personal Care" "Shower")
               "* %u Shower %? \n%U" :clock-in t :clock-resume t)
              ("fpo" "Others" entry (file+olp "~/git/org/qs.org" "Personal Care" "Others")
               "* %u Others %? \n%U" :clock-in t :clock-resume t)
                      
              ("fr" "Rest")
              ("frs" "Sleep" entry (file+olp "~/git/org/qs.org" "Rest" "Sleep")
               "* %u Sleep %? \n%U" :clock-in t :clock-resume t)
              ("frn" "Nap" entry (file+olp "~/git/org/qs.org" "Rest" "Nap")
               "* %u Nap %? \n%U" :clock-in t :clock-resume t)
              
              ;; ("fw" "Shower" entry(file+olp "~/git/org/qs.org" "Personal Care" "Shower")
              ;;  "* %u Shower %? \n%U" :clock-in t :clock-resume t)
              ("fe" "Eat")
              ("feb" "Eat Breakfast" entry (file+olp "~/git/org/qs.org" "Eat" "Breakfast")
               "* %u Eat Breakfast %? \n%U" :clock-in t :clock-resume t)
              ("fel" "Eat Lunch" entry (file+olp "~/git/org/qs.org" "Eat" "Lunch")
               "* %u Eat Lunch %? \n%U" :clock-in t :clock-resume t)
              ("fed" "Eat Dinner" entry (file+olp "~/git/org/qs.org" "Eat" "Dinner")
               "* %u Eat Dinner %? \n%U" :clock-in t :clock-resume t)
              ("fc" "Commute")
              ("fco" "Commute from/to Office" entry (file+olp "~/git/org/qs.org" "From/To Office")
               "* %u Commute from/to Office %? \n%U" :clock-in t :clock-resume t)
              ("fcg" "Commute General" entry (file+olp "~/git/org/qs.org" "Commuting" "General")
               "* %u Commute General %? \n%U" :clock-in t :clock-resume t)

              ;; fitness 
              ("ff" "Fitness")
              ("ffr" "Run" entry (file+olp "~/git/org/qs.org" "Fitness" "Run")
               "* %u Run %? \n%U" :clock-in t :clock-resume t)
              ("ffw" "Walk" entry (file+olp "~/git/org/qs.org" "Fitness" "Walk")
               "* %u Walk %? \n%U" :clock-in t :clock-resume t)
                            
              )))



;; Remove empty LOGBOOK drawers on clock out
;; (defun bh/remove-empty-drawer-on-clock-out ()
;;   (interactive)
;;   (save-excursion
;;     (beginning-of-line 0)
;;     (org-remove-empty-drawer-at (point))))
;; replaced above by: http://stackoverflow.com/questions/21767471/org-capture-and-time-clocking-misbehaving
(defun bh/remove-empty-drawer-on-clock-out ()
  (interactive)
  (save-excursion
    (beginning-of-line 0)
    (org-remove-empty-drawer-at "LOGBOOK" (point))))

(add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)

                                        ; Targets include this file and any file contributing to the agenda - up to 9 levels deep

;; TODO: change this block, use helm completion 
;; (setq org-completion-handler to 'helm)
;; actually, the following setting is mimic the helm behavoir, why not we just use helm, instead of making ido helm 

(setq org-refile-targets (quote ((nil :maxlevel . 6)
                                 (org-agenda-files :maxlevel . 6))))

(setq org-completion-handler 'helm)

                                        ; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)

                                        ; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

                                        ; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

;;;; Refile settings
                                        ; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)


;;
;; Resume clocking task when emacs is restarted
(org-clock-persistence-insinuate)
;;
;; Show lot of clocking history so it's easy to pick items off the C-F11 list
(setq org-clock-history-length 23)
;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)
;; Change tasks to NEXT when clocking in
(setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)
;; Do not prompt to resume an active clock
(setq org-clock-persist-query-resume nil)
;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)

(setq bh/keep-clock-running nil)

(defun bh/clock-in-to-next (kw)
  "Switch a task from TODO to NEXT when clocking in.
Skips capture tasks, projects, and subprojects.
Switch projects and subprojects from NEXT back to TODO"
  (when (not (and (boundp 'org-capture-mode) org-capture-mode))
    (cond
     ((and (member (org-get-todo-state) (list "TODO"))
           (bh/is-task-p))
      "NEXT")
     ((and (member (org-get-todo-state) (list "NEXT"))
           (bh/is-project-p))
      "TODO"))))

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/punch-in (arg)
  "Start continuous clocking and set the default task to the
selected task.  If no task is selected set the Organization task
as the default task."
  (interactive "p")
  (setq bh/keep-clock-running t)
  (if (equal major-mode 'org-agenda-mode)
      ;;
      ;; We're in the agenda
      ;;
      (let* ((marker (org-get-at-bol 'org-hd-marker))
             (tags (org-with-point-at marker (org-get-tags-at))))
        (if (and (eq arg 4) tags)
            (org-agenda-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))
    ;;
    ;; We are not in the agenda
    ;;
    (save-restriction
      (widen)
                                        ; Find the tags on the current task
      (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
          (org-clock-in '(16))
        (bh/clock-in-organization-task-as-default)))))

(defun bh/punch-out ()
  (interactive)
  (setq bh/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out))
  (org-agenda-remove-restriction-lock))

(defun bh/clock-in-default-task ()
  (save-excursion
    (org-with-point-at org-clock-default-task
      (org-clock-in))))

(defun bh/clock-in-parent-task ()
  "Move point to the parent (project) task if any and clock in"
  (let ((parent-task))
    (save-excursion
      (save-restriction
        (widen)
        (while (and (not parent-task) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (if parent-task
            (org-with-point-at parent-task
              (org-clock-in))
          (when bh/keep-clock-running
            (bh/clock-in-default-task)))))))

(defvar bh/organization-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f9") ;; BUG: british english, change to a simpler id. 

(defun bh/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find bh/organization-task-id 'marker)
    (org-clock-in '(16))))

(defun bh/clock-out-maybe ()
  (when (and bh/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (bh/clock-in-parent-task)))

(add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

(require 'org-id)
(defun bh/clock-in-task-by-id (id)
  "Clock in a task by id"
  (org-with-point-at (org-id-find id 'marker)
    (org-clock-in nil)))

(defun bh/clock-in-last-task (arg)
  "Clock in the interrupted task if there is one
Skip the default task and get the next one.
A prefix arg forces clock in of the default task."
  (interactive "p")
  (let ((clock-in-to-task
         (cond
          ((eq arg 4) org-clock-default-task)
          ((and (org-clock-is-active)
                (equal org-clock-default-task (cadr org-clock-history)))
           (caddr org-clock-history))
          ((org-clock-is-active) (cadr org-clock-history))
          ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
          (t (car org-clock-history)))))
    (widen)
    (org-with-point-at clock-in-to-task
      (org-clock-in nil))))

(setq org-time-stamp-rounding-minutes (quote (1 1))) ;; Y: default is 5

(setq org-agenda-clock-consistency-checks
      (quote (:max-duration "4:00"
                            :min-duration 0
                            :max-gap 0
                            :gap-ok-around ("4:00"))))

;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)

;; Agenda clock report parameters
(setq org-agenda-clockreport-parameter-plist
      (quote (:link t :maxlevel 5 :fileskip0 t :compact t :narrow 80)))

                                        ; Set default column view headings: Task Effort Clock_Summary
(setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
;; (setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM %20Mood")

                                        ; global Effort estimate values
                                        ; global STYLE property values for completion
(setq org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                    ("STYLE_ALL" . "habit"))))

;; Agenda log mode items to display (closed and state changes by default)
;; (setq org-agenda-log-mode-items (quote (closed state)))
(setq org-agenda-log-mode-items (quote (clock state)))

                                        ; Tags with fast selection keys
;; TODO: have @home, @office, @library, @coffe, @cinema 
;; TODO: have @running, @struech, 
(setq org-tag-alist (quote ((:startgroup)
                            ("@library" . ?L)
                            ("@office" . ?O)
                            ("@home" . ?H)
                            ("@coffeeshop" . ?C)
                            (:endgroup)
                            ("WAITING" . ?w)
                            ("HOLD" . ?h)
                            ("PERSONAL" . ?P)
                            ("WORK" . ?W)
                            ("FARM" . ?F)
                            ("NOTE" . ?n)
                            ("CANCELLED" . ?c)
                            )))

                                        ; Allow setting single tags without the menu
(setq org-fast-tag-selection-single-key (quote expert))

                                        ; For tag searches ignore tasks with scheduled and deadline dates
(setq org-agenda-tags-todo-honor-ignore-options t)

;; (require 'bbdb)
;; (require 'bbdb-com)
(global-set-key (kbd "<f9> p") 'bh/phone-call)

;;
;; Phone capture template handling with BBDB lookup
;; Adapted from code by Gregory J. Grubbs
(defun bh/phone-call ()
  "Return name and company info for caller from bbdb lookup"
  (interactive)
  (let* (name rec caller)
    (setq name (completing-read "Who is calling? "
                                (bbdb-hashtable)
                                'bbdb-completion-predicate
                                'confirm))
    (when (> (length name) 0)
                                        ; Something was supplied - look it up in bbdb
      (setq rec
            (or (first
                 (or (bbdb-search (bbdb-records) name nil nil)
                     (bbdb-search (bbdb-records) nil name nil)))
                name)))

                                        ; Build the bbdb link if we have a bbdb record, otherwise just return the name
    (setq caller (cond ((and rec (vectorp rec))
                        (let ((name (bbdb-record-name rec))
                              (company (bbdb-record-company rec)))
                          (concat "[[bbdb:"
                                  name "]["
                                  name "]]"
                                  (when company
                                    (concat " - " company)))))
                       (rec)
                       (t "NameOfCaller")))
    (insert caller)))

(setq org-agenda-span 'day)

(setq org-stuck-projects (quote ("" nil nil "")))

(defun bh/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

(defun bh/is-project-subtree-p ()
  "Any task with a todo keyword that is in a project subtree.
Callers of this function already widen the buffer view."
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (bh/find-project-task)
      (if (equal (point) task)
          nil
        t))))

(defun bh/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))

(defun bh/is-subproject-p ()
  "Any task which is a subtask of another project"
  (let ((is-subproject)
        (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
    (save-excursion
      (while (and (not is-subproject) (org-up-heading-safe))
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq is-subproject t))))
    (and is-a-task is-subproject)))

(defun bh/list-sublevels-for-projects-indented ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels 'indented)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defun bh/list-sublevels-for-projects ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels t)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defvar bh/hide-scheduled-and-waiting-next-tasks t)

(defun bh/toggle-next-task-display ()
  (interactive)
  (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
  (when  (equal major-mode 'org-agenda-mode)
    (org-agenda-redo))
  (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

(defun bh/skip-stuck-projects ()
  "Skip trees that are not stuck projects"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                nil
              next-headline)) ; a stuck project, has subtasks but no next task
        nil))))

(defun bh/skip-non-stuck-projects ()
  "Skip trees that are not stuck projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                next-headline
              nil)) ; a stuck project, has subtasks but no next task
        next-headline))))

(defun bh/skip-non-projects ()
  "Skip trees that are not projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (if (save-excursion (bh/skip-non-stuck-projects))
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            nil)
           ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
            nil)
           (t
            subtree-end))))
    (save-excursion (org-end-of-subtree t))))

(defun bh/skip-project-trees-and-habits ()
  "Skip trees that are projects"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits-and-single-tasks ()
  "Skip trees that are projects, tasks that are habits, single non-project tasks"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((org-is-habit-p)
        next-headline)
       ((and bh/hide-scheduled-and-waiting-next-tasks
             (member "WAITING" (org-get-tags-at)))
        next-headline)
       ((bh/is-project-p)
        next-headline)
       ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
        next-headline)
       (t
        nil)))))

(defun bh/skip-project-tasks-maybe ()
  "Show tasks related to the current restriction.
When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
When not restricted, skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max))))
           (limit-to-project (marker-buffer org-agenda-restrict-begin)))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (not limit-to-project)
             (bh/is-project-subtree-p))
        subtree-end)
       ((and limit-to-project
             (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-project-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       ((bh/is-project-subtree-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-project-tasks ()
  "Show project tasks.
Skip project and sub-project tasks, habits, and loose non-project tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       ((not (bh/is-project-subtree-p))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits ()
  "Skip trees that are projects and tasks that are habits"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-subprojects ()
  "Skip trees that are not projects"
  (let ((next-headline (save-excursion (outline-next-heading))))
    (if (bh/is-subproject-p)
        nil
      next-headline)))

(setq org-archive-mark-done nil)
(setq org-archive-location "%s_archive::* Archived Tasks")

(defun bh/skip-non-archivable-tasks ()
  "Skip trees that are not available for archiving"
  (save-restriction
    (widen)
    ;; Consider only tasks with done todo headings as archivable candidates
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
          (subtree-end (save-excursion (org-end-of-subtree t))))
      (if (member (org-get-todo-state) org-todo-keywords-1)
          (if (member (org-get-todo-state) org-done-keywords)
              (let* ((daynr (string-to-int (format-time-string "%d" (current-time))))
                     (a-month-ago (* 60 60 24 7 (+ daynr 1)))
                     (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                     (this-month (format-time-string "%Y-%m-" (current-time)))
                     (subtree-is-current (save-excursion
                                           (forward-line 1)
                                           (and (< (point) subtree-end)
                                                (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                (if subtree-is-current
                    subtree-end ; Has a date in this month or last month, skip it
                  nil))  ; available to archive
            (or subtree-end (point-max)))
        next-headline))))

(setq org-alphabetical-lists t)

;; Explicitly load required exporters
(require 'ox-html)
(require 'ox-latex)
(require 'ox-ascii)
(require 'ox-md)

(setq org-plantuml-jar-path "~/java/plantuml.jar") ;; TODO: change the location.. 

(add-hook 'org-babel-after-execute-hook 'bh/display-inline-images 'append)

                                        ; Make babel results blocks lowercase
(setq org-babel-results-keyword "results")

(defun bh/display-inline-images ()
  (condition-case nil
      (org-display-inline-images)
    (error nil)))

(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t) ;; TODO: simplifiy this list 
         (R . t)
         (sh . t)
         (ledger . t)
         (org . t)
         (plantuml . t)
(dot . t)
         (octave . t)
         (latex . t))))

        (setq org-confirm-babel-evaluate nil)

                                        ; Use fundamental mode when editing plantuml blocks with C-c '
;; TODO: what is fundamental mode?? 
(add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))


                                        ; I'm lazy and don't want to remember the name of the project to publish when I modify
                                        ; a file that is part of a project.  So this function saves the file, and publishes
                                        ; the project that includes this file
                                        ;
                                        ; It's bound to C-S-F12 so I just edit and hit C-S-F12 when I'm done and move on to the next thing
(defun bh/save-then-publish (&optional force)
  (interactive "P")
  (save-buffer)
  (org-save-all-org-buffers)
  (let ((org-html-head-extra)
        (org-html-validation-link "<a href=\"http://validator.w3.org/check?uri=referer\">Validate XHTML 1.0</a>"))
    (org-publish-current-project force)))

(global-set-key (kbd "C-s-<f12>") 'bh/save-then-publish)

(setq org-latex-listings t)

(setq org-html-xml-declaration (quote (("html" . "")
                                       ("was-html" . "<?xml version=\"1.0\" encoding=\"%s\"?>")
                                       ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>"))))

(setq org-export-allow-BIND t)

                                        ; Erase all reminders and rebuilt reminders for today from the agenda
(defun bh/org-agenda-to-appt ()
  (interactive)
  (setq appt-time-msg-list nil)
  (setq appt-display-format 'window) ;; YT: show notification in separate window
  (org-agenda-to-appt))

                                        ; Rebuild the reminders everytime the agenda is displayed
(add-hook 'org-finalize-agenda-hook 'bh/org-agenda-to-appt 'append)

                                        ; This is at the end of my .emacs - so appointments are set up when Emacs starts
(bh/org-agenda-to-appt)

                                        ; Activate appointments so we get notifications
(appt-activate t)

                                        ; If we leave Emacs running overnight - reset the appointments one minute after midnight
(run-at-time "24:01" nil 'bh/org-agenda-to-appt)

;; Enable abbrev-mode
(add-hook 'org-mode-hook (lambda () (abbrev-mode 1)))

;; Skeletons
;;
;; sblk - Generic block #+begin_FOO .. #+end_FOO
(define-skeleton skel-org-block
  "Insert an org block, querying for type."
  "Type: "
  "#+begin_" str "\n"
  _ - \n
  "#+end_" str "\n")

(define-abbrev org-mode-abbrev-table "sblk" "" 'skel-org-block)

;; splantuml - PlantUML Source block
(define-skeleton skel-org-block-plantuml
  "Insert a org plantuml block, querying for filename."
  "File (no extension): "
  "#+begin_src plantuml :file " str ".png :cache yes\n"
  _ - \n
  "#+end_src\n")

(define-abbrev org-mode-abbrev-table "splantuml" "" 'skel-org-block-plantuml)

(define-skeleton skel-org-block-plantuml-activity
  "Insert a org plantuml block, querying for filename."
  "File (no extension): "
  "#+begin_src plantuml :file " str "-act.png :cache yes :tangle " str "-act.txt\n"
  (bh/plantuml-reset-counters)
  "@startuml\n"
  "skinparam activity {\n"
  "BackgroundColor<<New>> Cyan\n"
  "}\n\n"
  "title " str " - \n"
  "note left: " str "\n"
  "(*) --> \"" str "\"\n"
  "--> (*)\n"
  _ - \n
  "@enduml\n"
  "#+end_src\n")

(defvar bh/plantuml-if-count 0)

(defun bh/plantuml-if () 
  (incf bh/plantuml-if-count)
  (number-to-string bh/plantuml-if-count))

(defvar bh/plantuml-loop-count 0)

(defun bh/plantuml-loop () 
  (incf bh/plantuml-loop-count)
  (number-to-string bh/plantuml-loop-count))

(defun bh/plantuml-reset-counters ()
  (setq bh/plantuml-if-count 0
        bh/plantuml-loop-count 0)
  "")

(define-abbrev org-mode-abbrev-table "sact" "" 'skel-org-block-plantuml-activity)

(define-skeleton skel-org-block-plantuml-activity-if
  "Insert a org plantuml block activity if statement"
  "" 
  "if \"\" then\n"
  "  -> [condition] ==IF" (setq ifn (bh/plantuml-if)) "==\n"
  "  --> ==IF" ifn "M1==\n"
  "  -left-> ==IF" ifn "M2==\n"
  "else\n"
  "end if\n"
  "--> ==IF" ifn "M2==")

(define-abbrev org-mode-abbrev-table "sif" "" 'skel-org-block-plantuml-activity-if)

(define-skeleton skel-org-block-plantuml-activity-for
  "Insert a org plantuml block activity for statement"
  "Loop for each: " 
  "--> ==LOOP" (setq loopn (bh/plantuml-loop)) "==\n"
  "note left: Loop" loopn ": For each " str "\n"
  "--> ==ENDLOOP" loopn "==\n"
  "note left: Loop" loopn ": End for each " str "\n" )

(define-abbrev org-mode-abbrev-table "sfor" "" 'skel-org-block-plantuml-activity-for)

(define-skeleton skel-org-block-plantuml-sequence
  "Insert a org plantuml activity diagram block, querying for filename."
  "File appends (no extension): "
  "#+begin_src plantuml :file " str "-seq.png :cache yes :tangle " str "-seq.txt\n"
  "@startuml\n"
  "title " str " - \n"
  "actor CSR as \"Customer Service Representative\"\n"
  "participant CSMO as \"CSM Online\"\n"
  "participant CSMU as \"CSM Unix\"\n"
  "participant NRIS\n"
  "actor Customer"
  _ - \n
  "@enduml\n"
  "#+end_src\n")

(define-abbrev org-mode-abbrev-table "sseq" "" 'skel-org-block-plantuml-sequence)

;; sdot - Graphviz DOT block
(define-skeleton skel-org-block-dot
  "Insert a org graphviz dot block, querying for filename."
  "File (no extension): "
  "#+begin_src dot :file " str ".png :cache yes :cmdline -Kdot -Tpng\n"
  "graph G {\n"
  _ - \n
  "}\n"
  "#+end_src\n")

(define-abbrev org-mode-abbrev-table "sdot" "" 'skel-org-block-dot)

;; sditaa - Ditaa source block
(define-skeleton skel-org-block-ditaa
  "Insert a org ditaa block, querying for filename."
  "File (no extension): "
  "#+begin_src ditaa :file " str ".png :cache yes\n"
  _ - \n
  "#+end_src\n")

(define-abbrev org-mode-abbrev-table "sditaa" "" 'skel-org-block-ditaa)

;; selisp - Emacs Lisp source block
(define-skeleton skel-org-block-elisp
  "Insert a org emacs-lisp block"
  ""
  "#+begin_src emacs-lisp\n"
  _ - \n
  "#+end_src\n")

(define-abbrev org-mode-abbrev-table "selisp" "" 'skel-org-block-elisp)

(global-set-key (kbd "<f5>") 'bh/org-todo)

(defun bh/org-todo (arg)
  (interactive "p")
  (if (equal arg 4)
      (save-restriction
        (bh/narrow-to-org-subtree)
        (org-show-todo-tree nil))
    (bh/narrow-to-org-subtree)
    (org-show-todo-tree nil)))

(global-set-key (kbd "<S-f5>") 'bh/widen)

(defun bh/widen ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (progn
        (org-agenda-remove-restriction-lock)
        (when org-agenda-sticky
          (org-agenda-redo)))
    (widen)))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "W" (lambda () (interactive) (setq bh/hide-scheduled-and-waiting-next-tasks t) (bh/widen))))
          'append)

(defun bh/restrict-to-file-or-follow (arg)
  "Set agenda restriction to 'file or with argument invoke follow mode.
I don't use follow mode very often but I restrict to file all the time
so change the default 'F' binding in the agenda to allow both"
  (interactive "p")
  (if (equal arg 4)
      (org-agenda-follow-mode)
    (widen)
    (bh/set-agenda-restriction-lock 4)
    (org-agenda-redo)
    (beginning-of-buffer)))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "F" 'bh/restrict-to-file-or-follow))
          'append)

(defun bh/narrow-to-org-subtree ()
  (widen)
  (org-narrow-to-subtree)
  (save-restriction
    (org-agenda-set-restriction-lock)))

(defun bh/narrow-to-subtree ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (progn
        (org-with-point-at (org-get-at-bol 'org-hd-marker)
          (bh/narrow-to-org-subtree))
        (when org-agenda-sticky
          (org-agenda-redo)))
    (bh/narrow-to-org-subtree)))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "N" 'bh/narrow-to-subtree))
          'append)

(defun bh/narrow-up-one-org-level ()
  (widen)
  (save-excursion
    (outline-up-heading 1 'invisible-ok)
    (bh/narrow-to-org-subtree)))

(defun bh/get-pom-from-agenda-restriction-or-point ()
  (or (and (marker-position org-agenda-restrict-begin) org-agenda-restrict-begin)
      (org-get-at-bol 'org-hd-marker)
      (and (equal major-mode 'org-mode) (point))
      org-clock-marker))

(defun bh/narrow-up-one-level ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (progn
        (org-with-point-at (bh/get-pom-from-agenda-restriction-or-point)
          (bh/narrow-up-one-org-level))
        (org-agenda-redo))
    (bh/narrow-up-one-org-level)))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "U" 'bh/narrow-up-one-level))
          'append)

(defun bh/narrow-to-org-project ()
  (widen)
  (save-excursion
    (bh/find-project-task)
    (bh/narrow-to-org-subtree)))

(defun bh/narrow-to-project ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (progn
        (org-with-point-at (bh/get-pom-from-agenda-restriction-or-point)
          (bh/narrow-to-org-project)
          (save-excursion
            (bh/find-project-task)
            (org-agenda-set-restriction-lock)))
        (org-agenda-redo)
        (beginning-of-buffer))
    (bh/narrow-to-org-project)
    (save-restriction
      (org-agenda-set-restriction-lock))))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "P" 'bh/narrow-to-project))
          'append)

(defvar bh/project-list nil)

(defun bh/view-next-project ()
  (interactive)
  (let (num-project-left current-project)
    (unless (marker-position org-agenda-restrict-begin)
      (goto-char (point-min))
                                        ; Clear all of the existing markers on the list
      (while bh/project-list
        (set-marker (pop bh/project-list) nil))
      (re-search-forward "Tasks to Refile")
      (forward-visible-line 1))

                                        ; Build a new project marker list
    (unless bh/project-list
      (while (< (point) (point-max))
        (while (and (< (point) (point-max))
                    (or (not (org-get-at-bol 'org-hd-marker))
                        (org-with-point-at (org-get-at-bol 'org-hd-marker)
                          (or (not (bh/is-project-p))
                              (bh/is-project-subtree-p)))))
          (forward-visible-line 1))
        (when (< (point) (point-max))
          (add-to-list 'bh/project-list (copy-marker (org-get-at-bol 'org-hd-marker)) 'append))
        (forward-visible-line 1)))

                                        ; Pop off the first marker on the list and display
    (setq current-project (pop bh/project-list))
    (when current-project
      (org-with-point-at current-project
        (setq bh/hide-scheduled-and-waiting-next-tasks nil)
        (bh/narrow-to-project))
                                        ; Remove the marker
      (setq current-project nil)
      (org-agenda-redo)
      (beginning-of-buffer)
      (setq num-projects-left (length bh/project-list))
      (if (> num-projects-left 0)
          (message "%s projects left to view" num-projects-left)
        (beginning-of-buffer)
        (setq bh/hide-scheduled-and-waiting-next-tasks t)
        (error "All projects viewed.")))))



(setq org-enforce-todo-dependencies t)

(setq org-hide-leading-stars nil)

(setq org-startup-indented t)

(setq org-cycle-separator-lines 0)

(setq org-blank-before-new-entry (quote ((heading)
                                         (plain-list-item . auto))))

(setq org-insert-heading-respect-content nil)

(setq org-reverse-note-order nil)

(setq org-show-following-heading t)
(setq org-show-hierarchy-above t)
(setq org-show-siblings (quote ((default))))

(setq org-special-ctrl-a/e t)
(setq org-special-ctrl-k t)
(setq org-yank-adjusted-subtrees t)

(setq org-id-method (quote uuidgen))

(setq org-deadline-warning-days 30)

(setq org-table-export-default-format "orgtbl-to-csv")

(setq org-link-frame-setup (quote ((vm . vm-visit-folder)
                                   (gnus . org-gnus-no-new-news)
                                   (file . find-file))))

                                        ; Use the current window for C-c ' source editing
(setq org-src-window-setup 'current-window)

(setq org-log-done (quote time))
(setq org-log-into-drawer t)
(setq org-log-state-notes-insert-after-drawers nil)

(setq org-clock-sound "/usr/local/lib/tngchime.wav")

                                        ; Enable habit tracking (and a bunch of other modules)
(setq org-modules (quote (org-bbdb
                          org-bibtex
                          org-crypt
                          org-gnus
                          org-id
                          org-info
                          org-jsinfo
                          org-habit
                          org-inlinetask
                          org-irc
                          org-mew
                          org-mhe
                          org-protocol
                          org-rmail
                          org-vm
                          org-wl
                          org-w3m)))

                                        ; position the habit graph on the agenda to the right of the default
(setq org-habit-graph-column 50)

(run-at-time "06:00" 86400 '(lambda () (setq org-habit-show-habits t)))

(global-auto-revert-mode t)

(require 'org-crypt)
                                        ; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
                                        ; GPG key to use for encryption
(setq org-crypt-key "F0B66B40")

(setq org-crypt-disable-auto-save nil)

(setq org-use-speed-commands t)
(setq org-speed-commands-user (quote (("0" . ignore)
                                      ("1" . ignore)
                                      ("2" . ignore)
                                      ("3" . ignore)
                                      ("4" . ignore)
                                      ("5" . ignore)
                                      ("6" . ignore)
                                      ("7" . ignore)
                                      ("8" . ignore)
                                      ("9" . ignore)

                                      ("a" . ignore)
                                      ("d" . ignore)
                                      ("h" . bh/hide-other)
                                      ("i" progn
                                       (forward-char 1)
                                       (call-interactively 'org-insert-heading-respect-content))
                                      ("k" . org-kill-note-or-show-branches)
                                      ("l" . ignore)
                                      ("m" . ignore)
                                      ("q" . bh/show-org-agenda)
                                      ("r" . ignore)
                                      ("s" . org-save-all-org-buffers)
                                      ("w" . org-refile)
                                      ("x" . ignore)
                                      ("y" . ignore)
                                      ("z" . org-add-note)

                                      ("A" . ignore)
                                      ("B" . ignore)
                                      ("E" . ignore)
                                      ("F" . bh/restrict-to-file-or-follow)
                                      ("G" . ignore)
                                      ("H" . ignore)
                                      ("J" . org-clock-goto)
                                      ("K" . ignore)
                                      ("L" . ignore)
                                      ("M" . ignore)
                                      ("N" . bh/narrow-to-org-subtree)
                                      ("P" . bh/narrow-to-org-project)
                                      ("Q" . ignore)
                                      ("R" . ignore)
                                      ("S" . ignore)
                                      ("T" . bh/org-todo)
                                      ("U" . bh/narrow-up-one-org-level)
                                      ("V" . ignore)
                                      ("W" . bh/widen)
                                      ("X" . ignore)
                                      ("Y" . ignore)
                                      ("Z" . ignore))))

(defun bh/show-org-agenda ()
  (interactive)
  (if org-agenda-sticky
      (switch-to-buffer "*Org Agenda( )*")
    (switch-to-buffer "*Org Agenda*"))
  (delete-other-windows))

(require 'org-protocol)

(setq require-final-newline t)

(defvar bh/insert-inactive-timestamp t)

(defun bh/toggle-insert-inactive-timestamp ()
  (interactive)
  (setq bh/insert-inactive-timestamp (not bh/insert-inactive-timestamp))
  (message "Heading timestamps are %s" (if bh/insert-inactive-timestamp "ON" "OFF")))

(defun bh/insert-inactive-timestamp ()
  (interactive)
  (org-insert-time-stamp nil t t nil nil nil))

(defun bh/insert-heading-inactive-timestamp ()
  (save-excursion
    (when bh/insert-inactive-timestamp
      (org-return)
      (org-cycle)
      (bh/insert-inactive-timestamp))))

(add-hook 'org-insert-heading-hook 'bh/insert-heading-inactive-timestamp 'append)

(setq org-export-with-timestamps nil)

(setq org-return-follows-link t)


(defun bh/prepare-meeting-notes ()
  "Prepare meeting notes for email
   Take selected region and convert tabs to spaces, mark TODOs with leading >>>, and copy to kill ring for pasting"
  (interactive)
  (let (prefix)
    (save-excursion
      (save-restriction
        (narrow-to-region (region-beginning) (region-end))
        (untabify (point-min) (point-max))
        (goto-char (point-min))
        (while (re-search-forward "^\\( *-\\\) \\(TODO\\|DONE\\): " (point-max) t)
          (replace-match (concat (make-string (length (match-string 1)) ?>) " " (match-string 2) ": ")))
        (goto-char (point-min))
        (kill-ring-save (point-min) (point-max))))))

(setq org-remove-highlights-with-change t)

(add-to-list 'Info-default-directory-list "~/git/org-mode/doc")

(setq org-read-date-prefer-future 'time)

(setq org-list-demote-modify-bullet (quote (("+" . "-")
                                            ("*" . "-")
                                            ("1." . "-")
                                            ("1)" . "-")
                                            ("A)" . "-")
                                            ("B)" . "-")
                                            ("a)" . "-")
                                            ("b)" . "-")
                                            ("A." . "-")
                                            ("B." . "-")
                                            ("a." . "-")
                                            ("b." . "-"))))

(setq org-tags-match-list-sublevels t)

(setq org-agenda-persistent-filter t)

(setq org-link-mailto-program (quote (compose-mail "%a" "%s")))

;; Bookmark handling
;;
(global-set-key (kbd "<C-f6>") '(lambda () (interactive) (bookmark-set "SAVED")))
(global-set-key (kbd "<f6>") '(lambda () (interactive) (bookmark-jump "SAVED")))


(setq org-agenda-skip-additional-timestamps-same-entry t)

(setq org-table-use-standard-references (quote from))

(setq org-file-apps (quote ((auto-mode . emacs)
                            ("\\.mm\\'" . system)
                            ("\\.x?html?\\'" . system)
                            ("\\.pdf\\'" . system))))

                                        ; Overwrite the current window with the agenda
(setq org-agenda-window-setup 'current-window)

(setq org-clone-delete-id t)

(setq org-cycle-include-plain-lists t)

(setq org-src-fontify-natively t)

(setq org-structure-template-alist
      (quote (("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
              ("o" "#+begin_src octave\n?\n#+end_src" "<src lang=octave\"?\">\n\n</src>")
              ("R" "#+begin_src R\n?\n#+end_src" "<src lang=R\"?\">\n\n</src>")
              ("n" "#+begin_note\n?\n#+end_note" "<note>\n?\n</note>") ;; TOOD: add note tag in html css stylesheet 
              ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
              ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
              ("v" "#+begin_verse\n?\n#+end_verse" "<verse>\n?\n</verse>")
              ("c" "#+begin_center\n?\n#+end_center" "<center>\n?\n</center>")
              ("l" "#+begin_latex\n?\n#+end_latex" "<literal style=\"latex\">\n?\n</literal>")
              ;;  ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
              ("L" "#+begin_src emacs-lisp \n?\n#+end_src" "<src lang=emacs-lisp\"?\">\n\n</src>")
              ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
              ("H" "#+html: " "<literal style=\"html\">?</literal>")
              ("a" "#+begin_ascii\n?\n#+end_ascii")
              ("A" "#+ascii: ")
              ("i" "#+index: ?" "#+index: ?")
              ("I" "#+include %file ?" "<include file=%file markup=\"?\">"))))

(defun bh/mark-next-parent-tasks-todo ()
  "Visit each parent task and change NEXT states to TODO"
  (let ((mystate (or (and (fboundp 'org-state)
                          state)
                     (nth 2 (org-heading-components)))))
    (when mystate
      (save-excursion
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) (list "NEXT"))
            (org-todo "TODO")))))))

(add-hook 'org-after-todo-state-change-hook 'bh/mark-next-parent-tasks-todo 'append)
(add-hook 'org-clock-in-hook 'bh/mark-next-parent-tasks-todo 'append)

(setq org-startup-folded t)


;; flyspell mode for spell checking everywhere
(add-hook 'org-mode-hook 'turn-on-flyspell 'append)



(setq org-src-preserve-indentation nil)
(setq org-edit-src-content-indentation 0)

(setq org-catch-invisible-edits 'error)

(setq org-export-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-charset-priority 'unicode)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))

(setq org-time-clocksum-format
      '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

(setq org-emphasis-alist (quote (("*" bold "<b>" "</b>")
                                 ("/" italic "<i>" "</i>")
                                 ("_" underline "<span style=\"text-decoration:underline;\">" "</span>")
                                 ("=" org-code "<code>" "</code>" verbatim)
                                 ("~" org-verbatim "<code>" "</code>" verbatim))))

(setq org-use-sub-superscripts nil)

(setq org-odd-levels-only nil)

(run-at-time "00:59" 3600 'org-save-all-org-buffers)



;;;;;; my config 
;; remove C-TAB
(define-key org-mode-map (kbd "C-S-<right>") 'mc/mark-next-like-this)
(define-key org-mode-map (kbd "C-S-<left>") 'mc/mark-previous-like-this)
(org-defkey org-mode-map (kbd "C-c [") nil)
(org-defkey org-mode-map (kbd "C-c ]") nil)
(org-defkey org-mode-map (kbd "C-TAB") nil)
(org-defkey org-mode-map (kbd "<f8>") nil)
;; use helm iwth org
;; (setq org-completion-handler 'helm)

;; ;; Disable keys in org-mode
;; ;;    C-c [ 
;; ;;    C-c ]
;; ;;    C-c ;
;; ;;    C-c C-x C-q  cancelling the clock (we never want this)
;; (add-hook 'org-mode-hook
;;           '(lambda ()
;;              ;; Undefine C-c [ and C-c ] since this breaks my
;;              ;; org-agenda files when directories are include It
;;              ;; expands the files in the directories individually
;;              (org-defkey org-mode-map "\C-c[" 'undefined)
;;              (org-defkey org-mode-map "\C-c]" 'undefined)
;;              (org-defkey org-mode-map "\C-c;" 'undefined)
;;              (org-defkey org-mode-map "\C-c\C-x\C-q" 'undefined))
;;           'append)



;; http://stackoverflow.com/questions/6156286/emacs-lisp-call-function-with-prefix-argument-programmatically
(defun yt/org-clock-in-select ()
  (interactive)
  (setq current-prefix-arg '(4)) ;; C-u, 
  (call-interactively 'org-clock-in))
(global-set-key (kbd "S-<f11>") 'yt/org-clock-in-select)


;; add the following 
(setq org-capture-bookmark nil)



(defun sacha/yank-more ()
  (interactive)
  (insert "[[")
  (yank)
  (insert "][more]]"))
(global-set-key (kbd "<f6>") 'sacha/yank-more)

(setq org-time-stamp-custom-formats '("<%A %d %B %Y>" . "<%A %d %B %Y %H:%M>"))


(defun yt/open-diary ()
  (interactive)
  (find-file "~/git/org/diary.org"))

(defun yt/open-tmp-R ()
  (interactive)
  (find-file "~/git/org/tmp.R"))
(defun yt/open-tmp-el ()
  (interactive)
  (find-file "~/git/org/tmp.el"))
(defun yt/open-tmp-org ()
  (interactive)
  (find-file "~/git/org/tmp.org"))
(global-set-key (kbd "<f9> f r") 'yt/open-tmp-R)
(global-set-key (kbd "<f9> f e") 'yt/open-tmp-el)
(global-set-key (kbd "<f9> f d") 'yt/open-diary)
(global-set-key (kbd "<f9> f o") 'yt/open-tmp-org)


(global-set-key (kbd "<f9> e") 'mu4e)
(global-set-key (kbd "<f9> g") 'magit-status)

(setq org-agenda-tags-column 120)


(defun yt/timeline-for-subtree ()
  "make a timeline view in agenda for current tree"
  (interactive)
  (org-copy-subtree)
  (find-file "~/tmp/agenda_tmp.org")
  (beginning-of-buffer)
  (let ((beg (point))) (end-of-buffer) (delete-region beg (point)))
  (org-paste-subtree)
  (save-buffer)
  (org-timeline)
  )


(require 'htmlize)





(setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM %10Mindfullness")
(setq org-image-actual-width '(400))


(setq bh/hide-scheduled-and-waiting-next-tasks nil)

;; ispell region will skip the sorce code and org drawers.
;; http://emacs.stackexchange.com/questions/450/intelligent-spell-checking-in-org-mode
;; (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
;; (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))


#+end_src
**** Agenda 
[2015-01-23 Fri 16:54]

#+begin_src emacs-lisp
;; Do not dim blocked tasks
(setq org-agenda-dim-blocked-tasks nil)

;; Compact the block agenda view
(setq org-agenda-compact-blocks nil)

;; Custom agenda command definitions
(setq org-agenda-custom-commands
      (quote (("N" "Notes" tags "NOTE"
               ((org-agenda-overriding-header "Notes")
                (org-tags-match-list-sublevels t)))
              ("h" "Habits" tags-todo "STYLE=\"habit\""
               ((org-agenda-overriding-header "Habits")
                (org-agenda-sorting-strategy
                 '(todo-state-down effort-up category-keep))))
              (" " "Agenda"
               ((agenda "" nil)
                (tags-todo "-CANCELLED+WAITING|HOLD/!"
                           ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                  (if bh/hide-scheduled-and-waiting-next-tasks
                                                                      ""
                                                                    " (including WAITING and SCHEDULED tasks)")))
                            (org-agenda-skip-function 'bh/skip-non-tasks)
                            (org-tags-match-list-sublevels nil)
                            (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
                (tags "RESPONSE"
                      ((org-agenda-overriding-header "Response")
                       (org-tags-match-list-sublevels nil)))
                (tags-todo "-CANCELLED/!NEXT"
                           ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                  (if bh/hide-scheduled-and-waiting-next-tasks
                                                                      ""
                                                                    " (including WAITING and SCHEDULED tasks)")))
                            (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                            (org-tags-match-list-sublevels t)
                            (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-sorting-strategy
                             '(todo-state-down effort-up category-keep))))
                (tags-todo "-CANCELLED/!"
                           ((org-agenda-overriding-header "Stuck Projects")
                            (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-HOLD-CANCELLED/!"
                           ((org-agenda-overriding-header "Projects")
                            (org-agenda-skip-function 'bh/skip-non-projects)
                            (org-tags-match-list-sublevels 'indented)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                           ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                  (if bh/hide-scheduled-and-waiting-next-tasks
                                                                      ""
                                                                    " (including WAITING and SCHEDULED tasks)")))
                            (org-agenda-skip-function 'bh/skip-non-project-tasks)
                            (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                           ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                  (if bh/hide-scheduled-and-waiting-next-tasks
                                                                      ""
                                                                    " (including WAITING and SCHEDULED tasks)")))
                            (org-agenda-skip-function 'bh/skip-project-tasks)
                            (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags "-REFILE/"
                      ((org-agenda-overriding-header "Tasks to Archive")
                       (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                       (org-tags-match-list-sublevels nil)))
                (tags "REFILE"
                      ((org-agenda-overriding-header "Tasks to Refile")
                       (org-tags-match-list-sublevels nil)))
                nil)))))

(defun bh/org-auto-exclude-function (tag)
  "Automatic task exclusion in the agenda with / RET"
  (and (cond
        ((string= tag "hold")
         t)
        ((string= tag "farm")
         t))
       (concat "-" tag)))

(setq org-agenda-auto-exclude-function 'bh/org-auto-exclude-function)


(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "V" 'bh/view-next-project))
          'append)

(setq org-show-entry-below (quote ((default))))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "\C-c\C-x<" 'bh/set-agenda-restriction-lock))
          'append)

(defun bh/set-agenda-restriction-lock (arg)
  "Set restriction lock to current task subtree or file if prefix is specified"
  (interactive "p")
  (let* ((pom (bh/get-pom-from-agenda-restriction-or-point))
         (tags (org-with-point-at pom (org-get-tags-at))))
    (let ((restriction-type (if (equal arg 4) 'file 'subtree)))
      (save-restriction
        (cond
         ((and (equal major-mode 'org-agenda-mode) pom)
          (org-with-point-at pom
            (org-agenda-set-restriction-lock restriction-type))
          (org-agenda-redo))
         ((and (equal major-mode 'org-mode) (org-before-first-heading-p))
          (org-agenda-set-restriction-lock 'file))
         (pom
          (org-with-point-at pom
            (org-agenda-set-restriction-lock restriction-type))))))))

;; Limit restriction lock highlighting to the headline only
(setq org-agenda-restriction-lock-highlight-subtree nil)

;; Always hilight the current agenda line
(add-hook 'org-agenda-mode-hook
          '(lambda () (hl-line-mode 1))
          'append)

;; Keep tasks with dates on the global todo lists
(setq org-agenda-todo-ignore-with-date nil)

;; Keep tasks with deadlines on the global todo lists
(setq org-agenda-todo-ignore-deadlines nil)

;; Keep tasks with scheduled dates on the global todo lists
(setq org-agenda-todo-ignore-scheduled nil)

;; Keep tasks with timestamps on the global todo lists
(setq org-agenda-todo-ignore-timestamp nil)

;; Remove completed deadline tasks from the agenda view
(setq org-agenda-skip-deadline-if-done t)

;; Remove completed scheduled tasks from the agenda view
(setq org-agenda-skip-scheduled-if-done t)

;; Remove completed items from search results
(setq org-agenda-skip-timestamp-if-done t)

(setq org-agenda-include-diary nil)
(setq org-agenda-diary-file "~/git/org/diary.org")


(setq org-agenda-insert-diary-extract-time t)

;; Include agenda archive files when searching for things
(setq org-agenda-text-search-extra-files (quote (agenda-archives)))

;; Show all future entries for repeating tasks
(setq org-agenda-repeating-timestamp-show-all t)

;; Show all agenda dates - even if they are empty
(setq org-agenda-show-all-dates t)

;; Sorting order for tasks on the agenda
(setq org-agenda-sorting-strategy
      (quote ((agenda habit-down time-up user-defined-up effort-up category-keep)
              (todo category-up effort-up)
              (tags category-up effort-up)
              (search category-up))))

;; Start the weekly agenda on Monday
(setq org-agenda-start-on-weekday 1)

;; Enable display of the time grid so we can see the marker for the current time
(setq org-agenda-time-grid (quote ((daily today remove-match)
                                   #("----------------" 0 16 (org-heading t))
                                   (0700 0800 0900 1000 1100 1200 1200 1300 1400 1500 1600 1700))))

;; Display tags farther right
;; (setq org-agenda-tags-column -102)

;;
;; Agenda sorting functions
;;
(setq org-agenda-cmp-user-defined 'bh/agenda-sort)

(defun bh/agenda-sort (a b)
  "Sorting strategy for agenda items.
Late deadlines first, then scheduled, then non-late deadlines"
  (let (result num-a num-b)
    (cond
                                        ; time specific items are already sorted first by org-agenda-sorting-strategy

                                        ; non-deadline and non-scheduled items next
     ((bh/agenda-sort-test 'bh/is-not-scheduled-or-deadline a b))

                                        ; deadlines for today next
     ((bh/agenda-sort-test 'bh/is-due-deadline a b))

                                        ; late deadlines next
     ((bh/agenda-sort-test-num 'bh/is-late-deadline '> a b))

                                        ; scheduled items for today next
     ((bh/agenda-sort-test 'bh/is-scheduled-today a b))

                                        ; late scheduled items next
     ((bh/agenda-sort-test-num 'bh/is-scheduled-late '> a b))

                                        ; pending deadlines last
     ((bh/agenda-sort-test-num 'bh/is-pending-deadline '< a b))

                                        ; finally default to unsorted
     (t (setq result nil)))
    result))

(defmacro bh/agenda-sort-test (fn a b)
  "Test for agenda sort"
  `(cond
                                        ; if both match leave them unsorted
    ((and (apply ,fn (list ,a))
          (apply ,fn (list ,b)))
     (setq result nil))
                                        ; if a matches put a first
    ((apply ,fn (list ,a))
     (setq result -1))
                                        ; otherwise if b matches put b first
    ((apply ,fn (list ,b))
     (setq result 1))
                                        ; if none match leave them unsorted
    (t nil)))

(defmacro bh/agenda-sort-test-num (fn compfn a b)
  `(cond
    ((apply ,fn (list ,a))
     (setq num-a (string-to-number (match-string 1 ,a)))
     (if (apply ,fn (list ,b))
         (progn
           (setq num-b (string-to-number (match-string 1 ,b)))
           (setq result (if (apply ,compfn (list num-a num-b))
                            -1
                          1)))
       (setq result -1)))
    ((apply ,fn (list ,b))
     (setq result 1))
    (t nil)))

(defun bh/is-not-scheduled-or-deadline (date-str)
  (and (not (bh/is-deadline date-str))
       (not (bh/is-scheduled date-str))))

(defun bh/is-due-deadline (date-str)
  (string-match "Deadline:" date-str))

(defun bh/is-late-deadline (date-str)
  (string-match "\\([0-9]*\\) d\. ago:" date-str))

(defun bh/is-pending-deadline (date-str)
  (string-match "In \\([^-]*\\)d\.:" date-str))

(defun bh/is-deadline (date-str)
  (or (bh/is-due-deadline date-str)
      (bh/is-late-deadline date-str)
      (bh/is-pending-deadline date-str)))

(defun bh/is-scheduled (date-str)
  (or (bh/is-scheduled-today date-str)
      (bh/is-scheduled-late date-str)))

(defun bh/is-scheduled-today (date-str)
  (string-match "Scheduled:" date-str))

(defun bh/is-scheduled-late (date-str)
  (string-match "Sched\.\\(.*\\)x:" date-str))

;; Use sticky agenda's so they persist
(setq org-agenda-sticky t)

;; The following setting is different from the document so that you
;; can override the document path by setting your path in the variable
;; org-mode-user-contrib-lisp-path
;;
(if (boundp 'org-mode-user-contrib-lisp-path)
    (add-to-list 'load-path org-mode-user-contrib-lisp-path)
  (add-to-list 'load-path (expand-file-name "~/git/org-mode/contrib/lisp")))

(require 'org-checklist) 
#+end_src
*** Calendar
[2015-02-23 Mon 10:20]
[[https://github.com/kiwanami/emacs-calfw][calfw]] display a calendar view in Emacs buffer.  this package has a good API, can integrate various calendar resources, iCal, Google Calendar and Org-mode etc into one calendar.  
 
#+begin_src emacs-lisp 
(require 'calfw-cal)
;; (require 'calfw-ical)
;; (require 'calfw-howm)
(require 'calfw-org)

(defun my-open-calendar ()
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-source "Green")  ; orgmode source
;;    (cfw:howm-create-source "Blue")  ; howm source
;;    (cfw:cal-create-source "Orange") ; diary source
;;    (cfw:ical-create-source "Moon" "~/moon.ics" "Gray")  ; ICS source1
;;    (cfw:ical-create-source "gcal" "https://..../basic.ics" "IndianRed") ; google calendar ICS
   ))) 

;;;; customization 
;; Month
(setq calendar-month-name-array
  ["January" "February" "March"     "April"   "May"      "June"
   "July"    "August"   "September" "October" "November" "December"])

;; Week days
(setq calendar-day-name-array
      ["Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday"])

;; First day of the week
(setq calendar-week-start-day 1) ; 0:Sunday, 1:Monday

(custom-set-faces
 '(cfw:face-title ((t (:foreground "#f0dfaf" :weight bold :height 2.0 :inherit variable-pitch))))
 '(cfw:face-header ((t (:foreground "#d0bf8f" :weight bold))))
 '(cfw:face-sunday ((t :foreground "#cc9393" :background "grey10" :weight bold)))
 '(cfw:face-saturday ((t :foreground "#8cd0d3" :background "grey10" :weight bold)))
 '(cfw:face-holiday ((t :background "grey10" :foreground "#8c5353" :weight bold)))
 '(cfw:face-grid ((t :foreground "DarkGrey")))
 '(cfw:face-default-content ((t :foreground "#bfebbf")))
 '(cfw:face-periods ((t :foreground "cyan")))
 '(cfw:face-day-title ((t :background "grey10")))
 '(cfw:face-default-day ((t :weight bold :inherit cfw:face-day-title)))
 '(cfw:face-annotation ((t :foreground "RosyBrown" :inherit cfw:face-day-title)))
 '(cfw:face-disable ((t :foreground "DarkGray" :inherit cfw:face-day-title)))
 '(cfw:face-today-title ((t :background "#7f9f7f" :weight bold)))
 '(cfw:face-today ((t :background: "grey10" :weight bold)))
 '(cfw:face-select ((t :background "#2f2f2f")))
 '(cfw:face-toolbar ((t :foreground "Steelblue4" :background "Steelblue4")))
 '(cfw:face-toolbar-button-off ((t :foreground "Gray10" :weight bold)))
 '(cfw:face-toolbar-button-on ((t :foreground "Gray50" :weight bold))))

;; Default setting
(setq cfw:fchar-junction ?+
      cfw:fchar-vertical-line ?|
      cfw:fchar-horizontal-line ?-
      cfw:fchar-left-junction ?+
      cfw:fchar-right-junction ?+
      cfw:fchar-top-junction ?+
      cfw:fchar-top-left-corner ?+
      cfw:fchar-top-right-corner ?+ )

;; Unicode characters
(setq cfw:fchar-junction ?╋
      cfw:fchar-vertical-line ?┃
      cfw:fchar-horizontal-line ?━
      cfw:fchar-left-junction ?┣
      cfw:fchar-right-junction ?┫
      cfw:fchar-top-junction ?┯
      cfw:fchar-top-left-corner ?┏
      cfw:fchar-top-right-corner ?┓)

;; Another unicode chars
(setq cfw:fchar-junction ?╬
      cfw:fchar-vertical-line ?║
      cfw:fchar-horizontal-line ?═
      cfw:fchar-left-junction ?╠
      cfw:fchar-right-junction ?╣
      cfw:fchar-top-junction ?╦
      cfw:fchar-top-left-corner ?╔
      cfw:fchar-top-right-corner ?╗)

#+end_src
#+results:
: 9559


*** Babel
[2015-01-29 Thu 14:16]

#+begin_src emacs-lisp

#+end_src
*** Export 
[2015-02-04 Wed 12:23]

#+begin_src emacs-lisp
(setq org-export-with-section-numbers nil)
#+end_src
*** PDF Export 
[2015-01-19 Mon 15:45]

#+begin_src emacs-lisp
;; http://emacs-fu.blogspot.co.uk/2011/04/nice-looking-pdfs-with-org-mode-and.html
;; 'djcb-org-article' for export org documents to the LaTex 'article', using
;; XeTeX and some fancy fonts; requires XeTeX (see org-latex-to-pdf-process)
(add-to-list 'org-latex-classes
                 '("yt/org-article"
                   "
\\documentclass[11pt,a4paper]{article}
\\usepackage{graphicx}    %% demo mode is a must when .img does not exists.
\\usepackage[T1]{fontenc}
\\usepackage{fontspec}
\\usepackage{hyperref}
\\usepackage{amstext}
\\usepackage{amssymb} %% checkbox
\\usepackage{minted}
\\defaultfontfeatures{Mapping=tex-text}
\\setromanfont{Gentium}
\\setromanfont [BoldFont={Gentium Basic Bold},
                ItalicFont={Gentium Basic Italic}]{Gentium Basic}
\\setsansfont{Charis SIL}
\\setmonofont[Scale=0.8]{DejaVu Sans Mono}
\\usepackage{geometry}
\\geometry{a4paper, textwidth=6.5in, textheight=10in,
            marginparsep=7pt, marginparwidth=.6in}
\\pagestyle{empty}
 
%% package from org-latex-default-packages-alist
\\usepackage{setspace}
\\onehalfspacing
\\usepackage{textcomp}
\\usepackage{marvosymb}
\\usepackage{wasysym}
\\usepackage{ulem}

\\renewcommand\\texttt[1]{{\\mint{cl}|#1|}} 
 
\\title{}
      [NO-DEFAULT-PACKAGES]
      [NO-PACKAGES]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(setq org-latex-default-class "yt/org-article")

;; code highlights using minted package 
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
(setq org-latex-minted-options
      '(("frame" "lines")
	("fontsize" "\\scriptsize")
	("linenos" "")))
;;;; comple pdf 
(setq org-latex-pdf-process
      '("xelatex -shell-escape -interaction=nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction=nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction=nonstopmode -output-directory %o %f"))
#+end_src

#+results:
| xelatex -shell-escape -interaction=nonstopmode -output-directory %o %f | xelatex -shell-escape -interaction=nonstopmode -output-directory %o %f | xelatex -shell-escape -interaction=nonstopmode -output-directory %o %f |

**** TODO fix xelatex compilation problem 
[2015-01-23 Fri 17:01]
*** HTML Export 
[2015-01-19 Mon 15:45]

#+begin_src emacs-lisp

;; http://sachachua.com/blog/2014/03/emacs-tweaks-export-org-checkboxes-using-utf-8-symbols/
(defun sacha/org-html-checkbox (checkbox)
  "Format CHECKBOX into HTML."
  (case checkbox (on "<span class=\"check\">&#x2611;</span>") ; checkbox (checked)
        (off "<span class=\"checkbox\">&#x2610;</span>")
        (trans "<code>[-]</code>")
        (t "")))
(defadvice org-html-checkbox (around sacha activate)
  (setq ad-return-value (sacha/org-html-checkbox (ad-get-arg 0))))

(setq org-html-head "<link rel=\"stylesheet\" type=\"text/css\"
href=\"http://sachachua.com/blog/wp-content/themes/sacha-v3/foundation/css/foundation.min.css\"></link>
<link rel=\"stylesheet\" type=\"text/css\" href=\"http://sachachua.com/org-export.css\"></link>
<link rel=\"stylesheet\" type=\"text/css\" href=\"http://sachachua.com/blog/wp-content/themes/sacha-v3/style.css\"></link>
<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js\"></script>")
(setq org-html-htmlize-output-type 'css)
(setq org-src-fontify-natively t)
(setq org-html-preamble "<a name=\"top\" id=\"top\"></a>")
(setq org-html-postamble "
<style type=\"text/css\">
.back-to-top {
    position: fixed;
    bottom: 2em;
    right: 0px;
    text-decoration: none;
    color: #000000;
    background-color: rgba(235, 235, 235, 0.80);
    font-size: 12px;
    padding: 1em;
    display: none;
}
.back-to-top:hover {    
    background-color: rgba(135, 135, 135, 0.50);
}
</style>
<div class=\"back-to-top\">
<a href=\"#top\">Back to top</a> | <a href=\"mailto:yi.tang.uk@me.com\">E-mail me</a>
</div>
<script type=\"text/javascript\">
    var offset = 220;
    var duration = 500;
    jQuery(window).scroll(function() {
        if (jQuery(this).scrollTop() > offset) {
            jQuery('.back-to-top').fadeIn(duration);
        } else {
            jQuery('.back-to-top').fadeOut(duration);
        }
    });
</script>")


;; Inline images in HTML instead of producting links to the image
(setq org-html-inline-images t)
;; Do not use sub or superscripts - I currently don't need this functionality in my documents
(setq org-export-with-sub-superscripts t)
;; Export with LaTeX fragments
(setq org-export-with-LaTeX-fragments t)
;; Increase default number of headings to export
(setq org-export-headline-levels 6)

#+end_src

#+results:
: 6

*** Blogging with Jekyll
I have encountered people who wants to blog, but never start it or quit at the beigining.  I've used wordpress, online editing, and others, but never a big fan or if. because you have to learn how to write the html code, before you thinking what to write.  I think this is the reason many people quit. 

Since I've been use org-mode, and did lot of publishing work, either for client, or colluge.  I usually keep learning notes in org-mode, and sometimes want to share with otehrs, and doing it in org-mode make it less hazzord to share with others, via org-mode-publish. 

so the currenlt workflow now is:

1. keep a note
   
   I tent to keep notes about creazy ideas I learnt, some tehnical stuff I learnt. if I feel it is necessary to share, either because there's good online material, or I think I shuold standard out and speak, for exmaple, the upcomming artile about intro to data.table in R, and few Emacs's thing.  

2. write & Edit 
   
   for a persoal note, I always keep it short, and to the exactly out, and it also fit it the big project that I defined.  if I take it out, one may feel it lost the context.  also, writing is not only about the problem-solutiion, but mora ebout analyse the problem, convicne people etc.  I need to find reference, highlight code, add picture etc. 
   
3. share 
   
   once I feel the artiel is ready to share, I can run the =org-publish= to generate the html file.  and push it to Github Page. 

4. Render 
   
   currently I use Jekyll to build the site, I haven't done any research about other servei, since it is do a very good job, thereisn't necessary to find a better one, as for a blog, the most important thing is the content.

Jeklly have few conventins, like the new, YAML etc, it is better to solve it autoamtilcally and in Emacs, as part of the export process. 


First, define a publish project, so that the exported html file will go to certail place, and we can define the styles, and other features for a praticularlly project.  but for Jeklly, it is more about to match the constraints.

#+begin_src emacs-lisp
;; ref: http://cute-jumper.github.io/emacs/2013/10/06/orgmode-to-github-pages-with-jekyll/
(setq org-publish-project-alist
      '(("yi-tang-github-io" ;; settings for cute-jumper.github.io
         :base-directory "~/git/yi-tang.github.io/org"
         :base-extension "org"
         :publishing-directory "~/git/yi-tang.github.io"
         :recursive t
         :publishing-function org-html-publish-to-html
         :with-toc nil
         :headline-levels 4
         :section-numbers nil
         :auto-preamble nil
         :auto-sitemap nil
         :html-extension "html"
         :htmlized-source t
         :body-only t
         :with-toc nil
         )))

#+end_src 

For managing a blog, it is good idea to keep the original org file inside of the website.  

#+begin_src emacs-lisp
(defvar jekyll-directory (expand-file-name "~/git/yi-tang.github.io/org/")
  "Path to Jekyll blog.")
(defvar jekyll-drafts-dir "_drafts/"
  "Relative path to drafts directory.")
(defvar jekyll-posts-dir "_posts/"
  "Relative path to posts directory.")
(defvar jekyll-post-ext ".org"
  "File extension of Jekyll posts.")
(defvar jekyll-post-template
  " 
#+BEGIN_HTML
---
layout: post
title: %s
excerpt: 
categories:
  -  
tags:
  -
comments: true 
---
#+END_HTML

#+call: GetLastUpdatedDate[:exports none]()[:results org]

#+TOC: headlines 4
"
    "Default template for Jekyll posts. %s will be replace by the post title.")

(defun jekyll-make-slug (s)
  "Turn a string into a slug."
  (replace-regexp-in-string
   " " "-" (downcase
            (replace-regexp-in-string
             "[^A-Za-z0-9 ]" "" s))))

(defun jekyll-yaml-escape (s)
  "Escape a string for YAML."
  (if (or (string-match ":" s)
        2  (string-match "\"" s))
      (concat "\"" (replace-regexp-in-string "\"" "\\\\\"" s) "\"")
    s))

(defun blog-draft-post (title)
  "Create a new Jekyll blog post."
  (interactive "sPost Title: ")
  (let ((draft-file (concat jekyll-directory jekyll-drafts-dir
                            (jekyll-make-slug title)
                            jekyll-post-ext)))
    (if (file-exists-p draft-file)
        (find-file draft-file)
      (find-file draft-file)
      (insert (format jekyll-post-template (jekyll-yaml-escape title))))))

(defun blog-publish-post ()
  "Move a draft post to the posts directory, and rename it so that it
 contains the date."
  (interactive)
  (cond
   ((not (equal
          (file-name-directory (buffer-file-name (current-buffer)))
          (concat jekyll-directory jekyll-drafts-dir)))
    (message "This is not a draft post."))
   ((buffer-modified-p)
    (message "Can't publish post; buffer has modifications."))
   (t
    (let ((filename
           (concat jekyll-directory jekyll-posts-dir
                   (format-time-string "%Y-%m-%d-")
                   (file-name-nondirectory
                    (buffer-file-name (current-buffer)))))
          (old-point (point)))
      (rename-file (buffer-file-name (current-buffer))
                   filename)
      (kill-buffer nil)
      (find-file filename)
      (set-window-point (selected-window) old-point)))))

(defun org-jekyll-post-link-follow (path)
  (org-open-file-with-emacs path))

(defun org-jekyll-post-link-export (path desc format)
  (cond
   ((eq format 'html)
    (format "<a href=\"{%% post_url %s %%}\">%s</a>" path desc))))

(org-add-link-type "jekyll-post" 'org-jekyll-post-link-follow 'org-jekyll-post-link-export)

;; Improve our blogging experience with Org-Jekyll. This code sets four
;; functions with corresponding key bindings:
;;
;; C-c j n - Create new draft
;; C-c j P - Post current draft
;; C-c j d - Show all drafts
;; C-c j p - Show all posts
;;
;; Once a draft has been posted (i.e., moved from the _drafts
;; directory to _post with the required date prefix in the filename), we
;; then need to html-export it to the jekyll rootdir (with org-publish).

(global-set-key (kbd "C-c j n") 'blog-draft-post)
(global-set-key (kbd "C-c j P") 'blog-publish-post)
(global-set-key (kbd "C-c j p") (lambda ()
				  (interactive)
				  (find-file "~/git/yi-tang.github.io/org/_posts/")))
(global-set-key (kbd "C-c j d") (lambda ()
				  (interactive)
				  (find-file "~/git/yi-tang.github.io/org/_drafts/")))

#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (find-file ~/git/yi-tang.github.io/org/_drafts/) |

**** code highlight 
[2015-01-23 Fri 17:47]

#+begin_src emacs-lisp
(defun org-to-jekyll-src (lang)
  " change src block heading to {% highlight %} "
  ;; (with-temp-buffer
  ;; (insert-file "current buffer name")
  (interactive)
  (goto-char (point-min))
  (while (not (eobp))
    (forward-line 1)
    (cond
     ((looking-at (concat "^#\\+BEGIN_SRC " lang ".*$"))
      (goto-char (match-beginning 0))
      (kill-line)
      (insert "#+begin_html")
      (insert (concat "{% highlight " lang " linenos %}")))
     ((looking-at "^#\\+END_SRC")
      (goto-char (match-beginning 0))
      (kill-line)
      (insert "{% highlight %}")
      (insert "#+end_html")))))
(defun org-src-jekyll ()
  "use jekyll highlight style"
  (interactive)
  (org-to-jekyll-src "R")
  (org-to-jekyll-src "C++")
  (org-to-jekyll-src "emacs-lisp")
  (org-to-jekyll-src "CSS")
  (org-to-jekyll-src "html")
  )
#+end_src

#+results:
=org-src-jekyll
=      
** Initialisation Completed
[2015-01-22 Thu 23:05]
* Babel Library 
:PROPERTIES:
:header-args: :eval no
:END:
to load a 
#+begin_example 
(org-babel-lob-ingest "~/git/.emacs.d/yi.babel.org)
#+end_example

** Update Emacs library
#+name: UpdateEmacsPackages
#+begin_src sh :results scalar 
cask install --path ~/git/.emacs.d
cask upgrade-cask --path ~/git/.emacs.d
git add -A 
git commit -m "cask update $(date)"
git push 
#+end_src

#+begin_example

#+call: UpdateEmacsPackages()

#+results:
: [master 3f5c750] cask update Sat Nov  8 18:06:08 GMT 2014
:  2 files changed, 7 insertions(+), 3 deletions(-)
:  delete mode 120000 .#yi.babel.org

#+end_example
** Ledger 

#+name: WeeklyExp
#+begin_src sh
ledger --period "this week" --start-of-week=1 -f ~/git/ImportantFiles/ledger register Exp -S "date, amount" 


# ledger --period "this week" -f ~/ledger register Exp -S "date, amount" --start-of-week=1 # last week's expense, sort by day, then by amount

## Weekly_Exp_Summary
# ledger --period "this week" -f ~/ledger register Exp --by-payee --collapse --sort "amount" --start-of-week=1  ## this week's expense, grouped by payee with sum, 

#+end_src

#+name: Weekly_Exp_Summary
#+begin_src sh :results scalar 
## Weekly_Exp_Summary
ledger --period "this week" -f ~/ledger register Exp --by-payee --collapse --sort "amount" --start-of-week=1  ## this week's expense, grouped by payee with sum, 
#+end_src

#+name: Ledger_Monthly_Balance_Exp
#+begin_src sh :results scalar
ledger --period "this month" -f ~/git/ImportantFiles/ledger bal Exp # monthly expense
#+end_src


#+begin_example

#+call: Weekly_Exp_Summary()

#+results:
: 14-Nov-04 Skipton               Expenses:Transport           £ 2.50       £ 2.50
: 14-Nov-03 Rebecca-Stroud        Expenses:Transport           £ 3.00       £ 5.50
: 14-Nov-08 Costa                 <Total>                      £ 4.40       £ 9.90
: 14-Nov-03 GiffGaff              Expenses:Bill:Phone         £ 12.00      £ 21.90
: 14-Nov-03 Sky                   Expenses:Bill:Internet      £ 12.70      £ 34.60
: 14-Nov-06 Morisson              Expenses:Grocery            £ 16.87      £ 51.47
: 14-Nov-03 UK-GOV                <Total>                    £ 172.35     £ 223.82

#+end_example

** image process 
#+name: Extract_PDF_Pages
#+begin_src sh :var pageStart=5 pageEnd=10 pdfFile="CompareWithCFSRDataset_final.pdf.pdf"
## http://www.linuxjournal.com/content/tech-tip-extract-pages-pdf
function pdfpextr() 
{
    # this function uses 3 arguments:
    #     $1 is the first page of the range to extract
    #     $2 is the last page of the range to extract
    #     $3 is the input file
    #     output file will be named "inputfile_pXX-pYY.pdf"
    # TODO: add format=png option 
    gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
       -dFirstPage=${1} \
       -dLastPage=${2} \
       -sOutputFile=${3%.pdf}_p${1}-p${2}.pdf \
       ${3}
}
pdfpextr $pageStart $pageEnd $pdfFile 
#+end_src

#+begin_example
#+name: Extract_PDF_Pages[:dir ~/git/org/img](1, 10, "tmp.pdf")
#+end_example

** org contact 
[2015-01-12 Mon 18:29]
#+name: GetContactGroup
#+begin_src elisp :var contact-file='("~/git/org/contacts.org") search-tag="SFG" contact-type="EMAIL" :eval no
(defun GetContactGroup (contact-file search-tag contact-type)
  (interactive)
  (let ((name-address (org-map-entries (lambda()
				 (cons (elt (org-heading-components) 4)  ;; get headline (name) 
				       (org-entry-get nil contact-type))) ;; get Email/phone etc property 
			       search-tag
			       contact-file)))
    (mapconcat (lambda (a-list)
		  (concat (car a-list) " <" (cdr a-list) ">"))
		name-address ", ")))
(GetContactGroup contact-file search-tag contact-type)
#+end_src

#+results: GetContactGroup
: Elizabeth Wood <Elizabeth.Wood@jbaconsulting.com>, Gary Savage <Gary.Savage@jbarisk.com>, James Ramm <James.Ramm@jbarisk.com>, Jennifer Hornsby <Jennifer.Hornsby@jbaconsulting.com>, Naomi Booth <Naomi.Booth@jbarisk.com>, Rob Lamb <Rob.Lamb@jbatrust.org>, Ross Towe <Ross.Towe@jbaconsulting.com>, Sarah Warren <Sarah.Warren@jbaconsulting.com>, Ye Liu <Ye.Liu@jbarisk.com>, Yi Tang <yi.tang@jbarisk.com>, Zora van Leeuwen <Zora.VanLeeuwen@jbaconsulting.com>

#+begin_example
#+call: GetContactGroup('("~/git/org/contacts.org"), "SFG", "EMAIL")
#+results:
: Elizabeth Wood <Elizabeth.Wood@jbaconsulting.com>, Gary Savage <Gary.Savage@jbarisk.com>, James Ramm <James.Ramm@jbarisk.com>, Jennifer Hornsby <Jennifer.Hornsby@jbaconsulting.com>, Naomi Booth <Naomi.Booth@jbarisk.com>, Rob Lamb <Rob.Lamb@jbatrust.org>, Ross Towe <Ross.Towe@jbaconsulting.com>, Sarah Warren <Sarah.Warren@jbaconsulting.com>, Zora van Leeuwen <Zora.VanLeeuwen@jbaconsulting.com>

#+end_example

** Blog
#+name: GetBlogPosts
#+begin_src R :results org :eval no
posts.dir <- "~/git/yi-tang.github.io/org/_posts"
all.posts <- list.files(posts.dir, pattern = ".org$")
sapply(seq_along(all.posts), function(i){
headline <- paste0("* ", all.posts[i])
content <- paste0("#+INCLUDE: ", '"', file.path(posts.dir, all.posts[i]), '"')
page.break <- "#+latex: \\newpage"
paste(headline, content, page.break, sep = "\n")
})
#+end_src

#+results: GetBlogPosts


#+name: GetLastUpdatedDate :eval no 
#+begin_src emacs-lisp :export none :results raw
;; (defun yt/last-updated-date ()
;; "return modification time of current file-visitng buffer"
;;   (interactive)
;;   (let ((y (format-time-string "%d %b %Y" (visited-file-modtime))))
;;    (concat  "/Last Updated/: " y))) ;; print out results 
;; (yt/last-updated-date)
#+end_src

#+results: GetLastUpdatedDate


* End 
[2015-01-19 Mon 11:43]

* C++
#+begin_src emacs-lisp
;; (global-set-key [(f9)] 'compile)
(setq compilation-window-height 2)
(setq compilation-finish-function
      (lambda (buf str)

        (if (string-match "exited abnormally" str)

            ;;there were errors
            (message "compilation errors, press C-x ` to visit")

          ;;no errors, make the compilation window go away in 0.5 seconds
          (run-at-time 0.5 nil 'delete-windows-on buf)
          (message "NO COMPILATION ERRORS!"))))



(defun indent-buffer-ask()
   (when (y-or-n-p "Indent buffer before saving? ")
     (indent-region (point-min) (point-max))))

(defun indent-buffer-no-ask()
  (indent-region (point-min) (point-max)))

(setq c++-mode-hook
      '(lambda ()
         (c-set-style "cc-mode")
         (define-key c++-mode-map "\C-c\C-c" 'compile)
         (define-key c++-mode-map "\C-c\C-e" 'next-error)
;        (add-hook 'before-save-hook 'indent-buffer-ask nil t)                  
	 (add-hook 'before-save-hook 'indent-buffer-no-ask nil t)  ;; indent c++ files after save.
))




(require 'flymake-google-cpplint)
(add-hook 'c++-mode-hook 'flymake-google-cpplint-load)
;; (custom-set-variables
;; '(flymake-google-cpplint-command "/Library/Python/2.7/site-packages/cpplint/cpplint.py"))
;"/usr/local/bin/cpplint"))

; start google-c-style with emacs
(require 'google-c-style)
(add-hook 'c-mode-common-hook 'google-set-c-style)
(add-hook 'c++-mode-common-hook 'google-make-newline-indent)
#+end_src
* The Emacs Way 
[2015-02-22 Sun 07:59]

helm-show-kill-ring 
 
helm-google-suggest 


